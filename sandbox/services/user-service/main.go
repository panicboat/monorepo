package main

import (
	"database/sql"
	"fmt"
	"log"
	"net"
	"os"
	"time"

	"context"
	"strconv"

	_ "github.com/lib/pq"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// User represents a user entity
type User struct {
	ID        int32     `db:"id"`
	Name      string    `db:"name"`
	Email     string    `db:"email"`
	CreatedAt time.Time `db:"created_at"`
}

// GetUserRequest represents request for getting a user
type GetUserRequest struct {
	Id int32 `json:"id"`
}

// GetUserResponse represents response for getting a user
type GetUserResponse struct {
	User *User `json:"user"`
}

// ListUsersRequest represents request for listing users
type ListUsersRequest struct {
	PageSize  int32  `json:"page_size"`
	PageToken string `json:"page_token"`
}

// ListUsersResponse represents response for listing users
type ListUsersResponse struct {
	Users         []*User `json:"users"`
	NextPageToken string  `json:"next_page_token"`
}

// UserService implements the user service
type UserService struct {
	db *sql.DB
}

// NewUserService creates a new user service
func NewUserService(db *sql.DB) *UserService {
	return &UserService{db: db}
}

// GetUser implements the GetUser RPC method
func (s *UserService) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	query := `SELECT id, name, email, created_at FROM users WHERE id = $1`
	row := s.db.QueryRowContext(ctx, query, req.Id)

	var user User
	err := row.Scan(&user.ID, &user.Name, &user.Email, &user.CreatedAt)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("user not found")
		}
		return nil, fmt.Errorf("failed to get user: %v", err)
	}

	return &GetUserResponse{User: &user}, nil
}

// ListUsers implements the ListUsers RPC method
func (s *UserService) ListUsers(ctx context.Context, req *ListUsersRequest) (*ListUsersResponse, error) {
	pageSize := req.PageSize
	if pageSize == 0 {
		pageSize = 10
	}

	offset := 0
	if req.PageToken != "" {
		parsedOffset, err := strconv.Atoi(req.PageToken)
		if err != nil {
			return nil, fmt.Errorf("invalid page token: %v", err)
		}
		offset = parsedOffset
	}

	query := `SELECT id, name, email, created_at FROM users ORDER BY id LIMIT $1 OFFSET $2`
	rows, err := s.db.QueryContext(ctx, query, pageSize+1, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to list users: %v", err)
	}
	defer rows.Close()

	var users []*User
	for rows.Next() {
		var user User
		err := rows.Scan(&user.ID, &user.Name, &user.Email, &user.CreatedAt)
		if err != nil {
			return nil, fmt.Errorf("failed to scan user: %v", err)
		}
		users = append(users, &user)
	}

	var nextPageToken string
	if len(users) > int(pageSize) {
		users = users[:pageSize]
		nextPageToken = strconv.Itoa(offset + int(pageSize))
	}

	return &ListUsersResponse{
		Users:         users,
		NextPageToken: nextPageToken,
	}, nil
}

// UserServiceServer interface for gRPC
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

// RegisterUserServiceServer registers the user service with gRPC server
func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	// Note: This would normally be generated by protoc
	// For demo purposes, we'll implement the registration manually
}

func main() {
	// Database connection
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbUser := os.Getenv("DB_USER")
	dbPassword := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")

	if dbHost == "" {
		dbHost = "localhost"
	}
	if dbPort == "" {
		dbPort = "5432"
	}
	if dbUser == "" {
		dbUser = "user_admin"
	}
	if dbPassword == "" {
		dbPassword = "user_password"
	}
	if dbName == "" {
		dbName = "user_db"
	}

	psqlInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort, dbUser, dbPassword, dbName)

	db, err := sql.Open("postgres", psqlInfo)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	// Test database connection
	err = db.Ping()
	if err != nil {
		log.Fatalf("Failed to ping database: %v", err)
	}

	log.Println("Connected to database successfully")

	// Create gRPC server
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	s := grpc.NewServer()
	userService := NewUserService(db)
	RegisterUserServiceServer(s, userService)

	// Register reflection service on gRPC server
	reflection.Register(s)

	log.Println("User service listening on :50051")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}