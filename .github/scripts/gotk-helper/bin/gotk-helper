#!/usr/bin/env ruby

# CLI interface for GitOps Toolkit helper functionality
# Provides commands for Kubernetes manifest management operations

require_relative '../application'
require 'thor'

class GotkHelperCLI < Thor
  desc "create_gitops_request PR_NUMBER", "Create GitOps request from PR for Kubernetes manifest deployment"
  option :manifest_file, desc: "Path to generated manifest file", required: true
  option :target_repo, desc: "Target GitOps repository (OWNER/REPO)", required: true
  option :target_branch, desc: "Target branch in GitOps repository", required: true
  option :service_name, desc: "Service name for single service processing", required: true
  option :environment, desc: "Environment name (develop, staging, production)", required: true

  def create_gitops_request(pr_number)
    controller = GotkHelperContainer.resolve(:gotk_helper_controller)

    success = controller.create_gitops_request(
      pr_number: pr_number.to_i,
      manifest_file: options[:manifest_file],
      target_repo: options[:target_repo],
      target_branch: options[:target_branch],
      service_name: options[:service_name],
      environment: options[:environment]
    )

    exit(success ? 0 : 1)
  end

  desc "dry_run PR_NUMBER", "Validate manifest workflow for specific service without side effects"
  option :manifest_file, desc: "Path to generated manifest file", required: true
  option :target_repo, desc: "Target GitOps repository (OWNER/REPO)", required: true
  option :target_branch, desc: "Target branch in GitOps repository", required: true
  option :service_name, desc: "Service name for single service validation", required: true
  option :environment, desc: "Environment name (develop, staging, production)", required: true

  def dry_run(pr_number)
    controller = GotkHelperContainer.resolve(:gotk_helper_controller)

    success = controller.dry_run_validation(
      pr_number: pr_number.to_i,
      manifest_file: options[:manifest_file],
      target_repo: options[:target_repo],
      target_branch: options[:target_branch],
      service_name: options[:service_name],
      environment: options[:environment]
    )

    exit(success ? 0 : 1)
  end

  desc "validate_env", "Validate environment configuration for manifest operations"

  def validate_env
    required_vars = %w[GITHUB_TOKEN GITHUB_REPOSITORY]
    missing_vars = required_vars.reject { |var| ENV[var] }

    if missing_vars.any?
      puts "::error::Missing required environment variables: #{missing_vars.join(', ')}"
      exit 1
    end

    puts "‚úÖ Environment is properly configured for manifest operations"
    puts "Repository: #{ENV['GITHUB_REPOSITORY']}"
    puts "Token present: #{ENV['GITHUB_TOKEN'] ? 'Yes' : 'No'}"

    # Test GitOps Toolkit Helper initialization
    begin
      container = GotkHelperContainer.configure
      if container[:gotk_helper_controller]
        puts "‚úÖ GitOps Toolkit Helper controller initialized successfully"
      else
        puts "‚ö†Ô∏è  GitOps Toolkit Helper controller not available"
      end
    rescue => error
      puts "‚ùå GitOps Toolkit Helper initialization failed: #{error.message}"
    end
  end

  desc "help_usage", "Show usage examples and tips"

  def help_usage
    puts <<~USAGE
      üìã GitOps Toolkit Helper Usage Examples

      üöÄ Basic Usage:
      # Create GitOps request from PR deployment labels
      #{File.basename($0)} create_gitops_request PR_NUMBER --manifest-file=PATH --target-repo=OWNER/REPO --target-branch=BRANCH

      üß™ Validation:
      # Validate specific service deployment
      #{File.basename($0)} dry_run PR_NUMBER --manifest-file=/tmp/demo-service.yaml --target-repo=panicboat/generated-manifests --target-branch=develop --service-name=demo-service --environment=develop

      ‚öôÔ∏è  Environment:
      # Check environment setup
      #{File.basename($0)} validate_env

      üß™ Validation:
      # Validate manifest workflow for specific service
      #{File.basename($0)} dry_run PR_NUMBER --manifest-file=PATH --target-repo=OWNER/REPO --target-branch=BRANCH --service-name=SERVICE --environment=ENV

      üí° How it works:
      - Validates PR data and deployment configuration
      - Checks manifest file structure and target parameters
      - Verifies service and environment configuration
      - Reports what would happen without making changes

      üîó GitHub Actions Integration:
      The workflow will use: #{File.basename($0)} create_gitops_request ${{ steps.pr-info.outputs.number }} \\
        --manifest-file=${{ steps.build.outputs.file }} \\
        --target-repo=panicboat/generated-manifests \\
        --target-branch=${{ github.ref_name }}

      üìã Required Environment Variables:
      - GITHUB_TOKEN: GitHub personal access token
      - GITHUB_REPOSITORY: Source repository in OWNER/REPO format
    USAGE
  end
end

GotkHelperCLI.start(ARGV)
