#!/usr/bin/env ruby

require_relative '../config/application'
require 'thor'

class DeployTriggerCLI < Thor
  desc "from_labels PR_NUMBER", "Generate deployment matrix from PR labels"

  def from_labels(pr_number = nil)
    controller = DependencyContainer.resolve(:deploy_trigger_controller)

    if ENV['GITHUB_ACTIONS'] && !pr_number
      puts "::error::PR number is required in GitHub Actions environment"
      exit 1
    end

    controller.trigger_from_labels(pr_number: pr_number&.to_i)
  end

  desc "from_branch BRANCH_NAME", "Generate deployment matrix from branch name"

  def from_branch(branch_name)
    controller = DependencyContainer.resolve(:deploy_trigger_controller)
    controller.trigger_from_branch(branch_name: branch_name)
  end

  desc "test_branch BRANCH_NAME", "Test branch deployment detection"

  def test_branch(branch_name)
    controller = DependencyContainer.resolve(:deploy_trigger_controller)
    controller.test_branch_deployment(branch_name: branch_name)
  end

  desc "simulate_labels PR_NUMBER", "Simulate GitHub Actions environment for PR labels"

  def simulate_labels(pr_number)
    puts "ðŸŽ­ Simulating GitHub Actions environment for PR labels..."

    ENV['GITHUB_ACTIONS'] = 'true'
    ENV['GITHUB_ENV'] = '/tmp/github_env'
    File.write(ENV['GITHUB_ENV'], '')

    controller = DependencyContainer.resolve(:deploy_trigger_controller)

    begin
      controller.trigger_from_labels(pr_number: pr_number.to_i)

      if File.exist?(ENV['GITHUB_ENV'])
        puts "\nðŸ“‹ Generated Environment Variables:"
        puts File.read(ENV['GITHUB_ENV'])
      end
    ensure
      File.delete(ENV['GITHUB_ENV']) if File.exist?(ENV['GITHUB_ENV'])
    end
  end

  desc "simulate_branch BRANCH_NAME", "Simulate GitHub Actions environment for branch"

  def simulate_branch(branch_name)
    puts "ðŸŽ­ Simulating GitHub Actions environment for branch..."

    ENV['GITHUB_ACTIONS'] = 'true'
    ENV['GITHUB_ENV'] = '/tmp/github_env'
    File.write(ENV['GITHUB_ENV'], '')

    controller = DependencyContainer.resolve(:deploy_trigger_controller)

    begin
      controller.trigger_from_branch(branch_name: branch_name)

      if File.exist?(ENV['GITHUB_ENV'])
        puts "\nðŸ“‹ Generated Environment Variables:"
        puts File.read(ENV['GITHUB_ENV'])
      end
    ensure
      File.delete(ENV['GITHUB_ENV']) if File.exist?(ENV['GITHUB_ENV'])
    end
  end
end

DeployTriggerCLI.start(ARGV)
