#!/usr/bin/env ruby

require_relative '../config/application'
require 'thor'

class GitHubActionsHelperCLI < Thor
  desc "validate_env", "Validate GitHub Actions environment"

  def validate_env
    required_vars = %w[GITHUB_TOKEN GITHUB_REPOSITORY]
    missing_vars = required_vars.reject { |var| ENV[var] }

    if missing_vars.any?
      puts "::error::Missing required environment variables: #{missing_vars.join(', ')}"
      exit 1
    end

    puts "✅ GitHub Actions environment is properly configured"
    puts "Repository: #{ENV['GITHUB_REPOSITORY']}"
    puts "Token present: #{ENV['GITHUB_TOKEN'] ? 'Yes' : 'No'}"
    puts "Env file: #{ENV['GITHUB_ENV']}"
  end

  desc "test_outputs", "Test GitHub Actions output generation"

  def test_outputs
    ENV['GITHUB_ENV'] = '/tmp/test_github_env'
    File.write(ENV['GITHUB_ENV'], '')

    File.open(ENV['GITHUB_ENV'], 'a') do |f|
      f.puts "TEST_VAR=test_value"
      f.puts "DEPLOY_LABELS=[\"deploy:test:develop\"]"
      f.puts "HAS_CHANGES=true"
    end

    puts "📋 Test outputs written to #{ENV['GITHUB_ENV']}:"
    puts File.read(ENV['GITHUB_ENV'])

    puts "::set-output name=test_output::test_value"
    puts "::notice::Test outputs generated successfully"

    File.delete(ENV['GITHUB_ENV'])
  end

  desc "debug_context", "Debug GitHub Actions context"

  def debug_context
    puts "🔍 GitHub Actions Context Debug"
    puts "GITHUB_ACTIONS: #{ENV['GITHUB_ACTIONS']}"
    puts "GITHUB_REPOSITORY: #{ENV['GITHUB_REPOSITORY']}"
    puts "GITHUB_EVENT_NAME: #{ENV['GITHUB_EVENT_NAME']}"
    puts "GITHUB_REF_NAME: #{ENV['GITHUB_REF_NAME']}"
    puts "GITHUB_BASE_REF: #{ENV['GITHUB_BASE_REF']}"
    puts "GITHUB_HEAD_REF: #{ENV['GITHUB_HEAD_REF']}"
    puts "GITHUB_WORKFLOW: #{ENV['GITHUB_WORKFLOW']}"
    puts "RUNNER_OS: #{ENV['RUNNER_OS']}"
    puts "PWD: #{Dir.pwd}"

    config_path = 'auto-label-mappings.yaml'
    if File.exist?(config_path)
      puts "✅ Configuration file found: #{config_path}"
    else
      puts "❌ Configuration file not found: #{config_path}"
    end

    begin
      puts "Git branch: #{`git branch --show-current`.strip}"
      puts "Git status: #{`git status --porcelain`.strip.empty? ? 'Clean' : 'Modified'}"
    rescue
      puts "Git: Not available or error"
    end
  end
end

GitHubActionsHelperCLI.start(ARGV)
