#!/usr/bin/env ruby

# CLI interface for configuration management functionality
# Provides commands for validating and managing workflow configuration

require_relative '../application'
require 'thor'

class ConfigManagerCLI < Thor
  desc "validate", "Validate workflow configuration file"

  def validate
    controller = ConfigManagerContainer.resolve(:config_manager_controller)
    controller.validate_configuration
  end

  desc "show", "Show parsed configuration in readable format"

  def show
    controller = ConfigManagerContainer.resolve(:config_manager_controller)
    controller.show_configuration
  end

  desc "test SERVICE_NAME ENVIRONMENT", "Test service configuration for specific service and environment"

  def test(service_name, environment)
    controller = ConfigManagerContainer.resolve(:config_manager_controller)
    controller.test_service_configuration(
      service_name: service_name,
      environment: environment
    )
  end

  desc "diagnostics", "Run comprehensive diagnostic checks"

  def diagnostics
    controller = ConfigManagerContainer.resolve(:config_manager_controller)
    controller.run_diagnostics
  end

  desc "template", "Generate configuration template with examples"

  def template
    controller = ConfigManagerContainer.resolve(:config_manager_controller)
    controller.generate_config_template
  end

  desc "check_file", "Check if configuration file exists and is readable"

  def check_file
    config_path = 'shared/workflow-config.yaml'

    if File.exist?(config_path)
      puts "‚úÖ Configuration file exists: #{config_path}"

      begin
        content = File.read(config_path)
        puts "‚úÖ File is readable (#{content.length} bytes)"

        require 'yaml'
        YAML.load(content)
        puts "‚úÖ File contains valid YAML"
      rescue => error
        puts "‚ùå File is not valid YAML: #{error.message}"
        exit 1
      end
    else
      puts "‚ùå Configuration file not found: #{config_path}"
      puts "   Use 'config-manager template' to generate a template"
      exit 1
    end
  end

  desc "environments", "List all configured environments"

  def environments
    begin
      controller = ConfigManagerContainer.resolve(:config_manager_controller)
      config_client = ConfigManagerContainer.resolve(:config_client)
      config = config_client.load_workflow_config

      puts "üåç Configured Environments:"
      config.environments.each do |env_name, env_config|
        puts "  #{env_name}:"
        puts "    AWS Region: #{env_config['aws_region']}"
        puts "    IAM Plan Role: #{env_config['iam_role_plan']}"
        puts "    IAM Apply Role: #{env_config['iam_role_apply']}"
        puts ""
      end
    rescue => error
      puts "‚ùå Failed to load environments: #{error.message}"
      exit 1
    end
  end

  desc "services", "List all configured services"

  def services
    begin
      config_client = ConfigManagerContainer.resolve(:config_client)
      config = config_client.load_workflow_config

      puts "üîß Configured Services:"
      if config.services.empty?
        puts "  No services explicitly configured"
        puts "  Services will be auto-discovered from directory structure"
      else
        config.services.each do |service_name, service_config|
          puts "  #{service_name}:"
          if service_config['directory_conventions']
            service_config['directory_conventions'].each do |stack, pattern|
              puts "    #{stack}: #{pattern}"
            end
          else
            puts "    Using default directory conventions"
          end
          puts ""
        end
      end
    rescue => error
      puts "‚ùå Failed to load services: #{error.message}"
      exit 1
    end
  end

  desc "safety_checks", "Show safety check configuration"

  def safety_checks
    begin
      config_client = ConfigManagerContainer.resolve(:config_client)
      config = config_client.load_workflow_config

      safety_config = config.raw_config['safety_checks'] || {}

      puts "üö® Safety Check Configuration:"
      puts "  Require Merged PR: #{safety_config['require_merged_pr'] || 'not configured'}"
      puts "  Fail on Missing PR: #{safety_config['fail_on_missing_pr'] || 'not configured'}"
      puts "  Max Retry Attempts: #{safety_config['max_retry_attempts'] || 'not configured'}"
      puts "  Allowed Direct Push Branches: #{(safety_config['allowed_direct_push_branches'] || []).join(', ')}"

      if safety_config['require_merged_pr']
        puts "\n‚úÖ Safety checks are enabled - deployments require PR workflow"
      else
        puts "\n‚ö†Ô∏è  Safety checks are disabled - direct pushes may trigger deployments"
      end
    rescue => error
      puts "‚ùå Failed to load safety configuration: #{error.message}"
      exit 1
    end
  end
end

ConfigManagerCLI.start(ARGV)
