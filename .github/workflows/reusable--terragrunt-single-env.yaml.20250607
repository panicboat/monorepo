name: 'Reusable Terragrunt Single Environment'

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      terraform_version:
        required: false
        type: string
        default: '1.5.7'
        description: 'Terraform version'
      terragrunt_version:
        required: false
        type: string
        default: '0.53.2'
        description: 'Terragrunt version'
      action_type:
        required: true
        type: string
        description: 'Action type: plan or apply'

jobs:
  terragrunt-execution:
    name: '${{ inputs.action_type }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Terragrunt configuration
        id: load-config
        run: |
          CONFIG_FILE=".github/terragrunt-actions-config.yaml"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # 環境固有の設定を取得、なければdefaultを使用
          PLAN_IAM_ROLE=$(yq e ".${{ inputs.environment }}.iam_role_plan // .default.iam_role_plan" "$CONFIG_FILE")
          APPLY_IAM_ROLE=$(yq e ".${{ inputs.environment }}.iam_role_apply // .default.iam_role_apply" "$CONFIG_FILE")
          AWS_REGION=$(yq e ".${{ inputs.environment }}.aws_region // .default.aws_region // \"us-east-1\"" "$CONFIG_FILE")
          WORKING_DIR=$(yq e ".${{ inputs.environment }}.working_directory // \"\"" "$CONFIG_FILE")

          # working_directoryが指定されていない場合は自動検出
          if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
            # 複数パターンを検索
            POSSIBLE_PATHS=(
              "${{ inputs.project_name }}/terragrunt/envs/${{ inputs.environment }}"
              "*/${{ inputs.project_name }}/terragrunt/envs/${{ inputs.environment }}"
            )

            for path_pattern in "${POSSIBLE_PATHS[@]}"; do
              FOUND_PATH=$(find . -path "./$path_pattern" -type d | head -1)
              if [ -n "$FOUND_PATH" ]; then
                WORKING_DIR="$FOUND_PATH"
                break
              fi
            done
          fi

          if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
            echo "Working directory not found for project: ${{ inputs.project_name }}, environment: ${{ inputs.environment }}"
            exit 1
          fi

          echo "plan-iam-role=$PLAN_IAM_ROLE" >> $GITHUB_OUTPUT
          echo "apply-iam-role=$APPLY_IAM_ROLE" >> $GITHUB_OUTPUT
          echo "aws-region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "working-directory=$WORKING_DIR" >> $GITHUB_OUTPUT

          echo "Configuration loaded:"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Plan IAM Role: $PLAN_IAM_ROLE"
          echo "  Apply IAM Role: $APPLY_IAM_ROLE"
          echo "  AWS Region: $AWS_REGION"
          echo "  Working Directory: $WORKING_DIR"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action_type == 'plan' && steps.load-config.outputs.plan-iam-role || steps.load-config.outputs.apply-iam-role }}
          aws-region: ${{ steps.load-config.outputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  # 重要: wrapperを無効にして生の出力を取得

      - name: Setup Terragrunt Binary
        run: |
          TG_VERSION=${{ inputs.terragrunt_version }}
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Terragrunt Plan
        if: inputs.action_type == 'plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'plan'
          args: '-no-color -detailed-exitcode'
          tg_dir: ${{ steps.load-config.outputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Fallback Plan (if action fails or output empty)
        if: inputs.action_type == 'plan' && (steps.plan.outcome == 'failure' || steps.plan.outputs.tg_action_output == '')
        id: plan-fallback
        working-directory: ${{ steps.load-config.outputs.working-directory }}
        run: |
          echo "Running fallback terragrunt plan..."

          # まずはinitを実行
          terragrunt init -no-color

          # planを実行して出力をキャプチャ
          terragrunt plan -no-color > plan_output.txt 2>&1 || true

          echo "=== Fallback Plan Output ==="
          cat plan_output.txt
          echo "=== End Fallback Plan Output ==="

          # GitHub Outputに保存
          echo "plan-output<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Capture Plan Output
        if: inputs.action_type == 'plan' && always()
        id: capture-plan
        working-directory: ${{ steps.load-config.outputs.working-directory }}
        run: |
          # Plan出力を再実行してキャプチャ（出力のみを取得）
          terragrunt plan -no-color > plan_output.txt 2>&1 || true

          # ファイル内容を確認
          echo "=== Plan Output ==="
          cat plan_output.txt
          echo "=== End Plan Output ==="

          # Plan出力をGitHub Outputに保存
          PLAN_OUTPUT=$(cat plan_output.txt)

          # 出力を制限（30,000文字まで）
          if [ ${#PLAN_OUTPUT} -gt 30000 ]; then
            PLAN_OUTPUT="${PLAN_OUTPUT:0:30000}... (output truncated, see workflow logs for full details)"
          fi

          {
            echo "plan-output<<EOF"
            echo "$PLAN_OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Terragrunt Apply
        if: inputs.action_type == 'apply'
        id: apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'apply'
          args: '-auto-approve -no-color'
          tg_dir: ${{ steps.load-config.outputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Parse Plan Results
        if: inputs.action_type == 'plan' && always()
        id: parse-plan
        run: |
          cat > plan_output_encoded.txt << 'PLAN_OUTPUT_EOF'
          ${{ steps.plan.outputs.tg_action_output }}
          PLAN_OUTPUT_EOF

          python3 -c "
          import urllib.parse
          import sys

          with open('plan_output_encoded.txt', 'r') as f:
              encoded_content = f.read().strip()

          decoded_content = urllib.parse.unquote(encoded_content)

          with open('plan_output_decoded.txt', 'w') as f:
              f.write(decoded_content)
          "

          if [ "${{ steps.plan.outcome }}" == "success" ]; then
            if [ "${{ steps.plan.outputs.tg_action_exit_code }}" == "0" ]; then
              PLAN_STATUS="✅ No changes"
            elif [ "${{ steps.plan.outputs.tg_action_exit_code }}" == "2" ]; then
              PLAN_STATUS="✅ Changes detected"
            else
              PLAN_STATUS="✅ Success"
            fi
          else
            PLAN_STATUS="❌ Failed"
          fi

          if [ -f "plan_output_decoded.txt" ] && [ -s "plan_output_decoded.txt" ]; then
            PLAN_OUTPUT=$(cat plan_output_decoded.txt)
          elif [ "${{ steps.plan-fallback.outputs.plan-output != '' }}" == "true" ]; then
            PLAN_OUTPUT="${{ steps.plan-fallback.outputs.plan-output }}"
          else
            PLAN_OUTPUT="Plan execution completed. See workflow logs for detailed output."
          fi

          if [ "$PLAN_OUTPUT" != "Plan execution completed. See workflow logs for detailed output." ]; then
            ADD_COUNT=$(echo "$PLAN_OUTPUT" | grep -c "will be created" 2>/dev/null || echo "0")
            CHANGE_COUNT=$(echo "$PLAN_OUTPUT" | grep -c "will be updated" 2>/dev/null || echo "0")
            DESTROY_COUNT=$(echo "$PLAN_OUTPUT" | grep -c "will be destroyed" 2>/dev/null || echo "0")

            if [ "$ADD_COUNT" == "0" ] && [ "$CHANGE_COUNT" == "0" ] && [ "$DESTROY_COUNT" == "0" ]; then
              PLAN_LINE=$(echo "$PLAN_OUTPUT" | grep "Plan:" | tail -1)
              if [ -n "$PLAN_LINE" ]; then
                ADD_COUNT=$(echo "$PLAN_LINE" | sed -n 's/.*Plan: \([0-9]*\) to add.*/\1/p' 2>/dev/null | head -1 | tr -d '\n' || echo "0")
                CHANGE_COUNT=$(echo "$PLAN_LINE" | sed -n 's/.*\([0-9]*\) to change.*/\1/p' 2>/dev/null | head -1 | tr -d '\n' || echo "0")
                DESTROY_COUNT=$(echo "$PLAN_LINE" | sed -n 's/.*\([0-9]*\) to destroy.*/\1/p' 2>/dev/null | head -1 | tr -d '\n' || echo "0")
              fi
            fi

            ADD_COUNT=$(echo "$ADD_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)
            CHANGE_COUNT=$(echo "$CHANGE_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)
            DESTROY_COUNT=$(echo "$DESTROY_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)

            # 空の場合は0にする
            ADD_COUNT=${ADD_COUNT:-0}
            CHANGE_COUNT=${CHANGE_COUNT:-0}
            DESTROY_COUNT=${DESTROY_COUNT:-0}

            if [ ${#PLAN_OUTPUT} -gt 30000 ]; then
              PLAN_OUTPUT="${PLAN_OUTPUT:0:30000}... (output truncated, see workflow logs for full details)"
            fi
          else
            ADD_COUNT="0"
            CHANGE_COUNT="0"
            DESTROY_COUNT="0"
          fi

          rm -f plan_output_encoded.txt plan_output_decoded.txt

          echo "plan-status=$PLAN_STATUS" >> $GITHUB_OUTPUT
          echo "add-count=$ADD_COUNT" >> $GITHUB_OUTPUT
          echo "change-count=$CHANGE_COUNT" >> $GITHUB_OUTPUT
          echo "destroy-count=$DESTROY_COUNT" >> $GITHUB_OUTPUT

          {
            echo "plan-output<<EOF"
            if [ -f "plan_output_decoded.txt" ]; then
              cat plan_output_decoded.txt
            else
              echo "$PLAN_OUTPUT"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Parse Apply Results
        if: inputs.action_type == 'apply' && always()
        id: parse-apply
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            APPLY_STATUS="✅ Success"
          else
            APPLY_STATUS="❌ Failed"
          fi

          cat > apply_output_encoded.txt << 'APPLY_OUTPUT_EOF'
          ${{ steps.apply.outputs.tg_action_output }}
          APPLY_OUTPUT_EOF

          python3 -c "
          import urllib.parse
          import sys

          with open('apply_output_encoded.txt', 'r') as f:
              encoded_content = f.read().strip()

          decoded_content = urllib.parse.unquote(encoded_content)

          with open('apply_output_decoded.txt', 'w') as f:
              f.write(decoded_content)
          "

          if [ -f "apply_output_decoded.txt" ] && [ -s "apply_output_decoded.txt" ]; then
            APPLY_OUTPUT=$(cat apply_output_decoded.txt)
          else
            APPLY_OUTPUT="Apply execution completed. See workflow logs for detailed output."
          fi

          if [ "$APPLY_OUTPUT" != "Apply execution completed. See workflow logs for detailed output." ]; then
            ADDED_COUNT=$(echo "$APPLY_OUTPUT" | grep -c "Creation complete" 2>/dev/null || echo "0")
            CHANGED_COUNT=$(echo "$APPLY_OUTPUT" | grep -c "Modifications complete" 2>/dev/null || echo "0")
            DESTROYED_COUNT=$(echo "$APPLY_OUTPUT" | grep -c "Destruction complete" 2>/dev/null || echo "0")

            ADDED_COUNT=$(echo "$ADDED_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)
            CHANGED_COUNT=$(echo "$CHANGED_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)
            DESTROYED_COUNT=$(echo "$DESTROYED_COUNT" | tr -d '\n' | grep -o '[0-9]*' | head -1)

            ADDED_COUNT=${ADDED_COUNT:-0}
            CHANGED_COUNT=${CHANGED_COUNT:-0}
            DESTROYED_COUNT=${DESTROYED_COUNT:-0}

            if [ ${#APPLY_OUTPUT} -gt 20000 ]; then
              APPLY_OUTPUT="${APPLY_OUTPUT:0:20000}... (output truncated, see workflow logs for full details)"
            fi
          else
            ADDED_COUNT="0"
            CHANGED_COUNT="0"
            DESTROYED_COUNT="0"
          fi

          rm -f apply_output_encoded.txt apply_output_decoded.txt

          echo "apply-status=$APPLY_STATUS" >> $GITHUB_OUTPUT
          echo "added-count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          echo "changed-count=$CHANGED_COUNT" >> $GITHUB_OUTPUT
          echo "destroyed-count=$DESTROYED_COUNT" >> $GITHUB_OUTPUT

          {
            echo "apply-output<<EOF"
            if [ -f "apply_output_decoded.txt" ]; then
              cat apply_output_decoded.txt
            else
              echo "$APPLY_OUTPUT"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Get merged PR information
        id: merged-pr
        if: github.event_name == 'push'
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Determine PR context
        id: pr-context
        run: |
          echo "=== PR Context Detection ==="
          echo "Event: ${{ github.event_name }}"
          echo "Current SHA: ${{ github.sha }}"

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            CONTEXT_SOURCE="pr-event"
            echo "Using PR event context"
          elif [ "${{ github.event_name }}" == "push" ] && [ "${{ steps.merged-pr.outputs.number }}" != "" ]; then
            PR_NUMBER="${{ steps.merged-pr.outputs.number }}"
            PR_TITLE="${{ steps.merged-pr.outputs.title }}"
            CONTEXT_SOURCE="merged-pr-action"
            echo "Using merged PR action context"
          else
            # Fallback: GitHub APIで直接検索
            echo "Attempting fallback PR detection..."
            PR_INFO=$(gh pr list --search "${{ github.sha }}" --state all --json number,title --jq '.[0]' 2>/dev/null || echo "null")

            if [ "$PR_INFO" != "null" ] && [ -n "$PR_INFO" ]; then
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number // empty')
              PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // empty')
              CONTEXT_SOURCE="github-cli-search"
              echo "Found PR via GitHub CLI search"
            else
              PR_NUMBER=""
              PR_TITLE=""
              CONTEXT_SOURCE="none"
              echo "No PR context available"
            fi
          fi

          echo "PR Number: $PR_NUMBER"
          echo "PR Title: $PR_TITLE"
          echo "Context Source: $CONTEXT_SOURCE"

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "context-source=$CONTEXT_SOURCE" >> $GITHUB_OUTPUT
          echo "has-pr=$([ -n "$PR_NUMBER" ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Create or update PR comment for Plan
        if: inputs.action_type == 'plan' && steps.pr-context.outputs.has-pr == 'true'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📋 Terragrunt Plan Results

            **Project**: ${{ inputs.project_name }}
            **Environment**: `${{ inputs.environment }}`
            **Directory**: `${{ steps.load-config.outputs.working-directory }}`
            **IAM Role (Plan)**: ${{ steps.load-config.outputs.plan-iam-role }}
            **AWS Region**: ${{ steps.load-config.outputs.aws-region }}
            **Status**: ${{ steps.parse-plan.outputs.plan-status }}
            **Event**: ${{ github.event_name }}

            ### 📊 Plan Summary

            | Action    | Count |
            | --------- | ----- |
            | 🟢 Add     | ${{ steps.parse-plan.outputs.add-count }}     |
            | 🟡 Change  | ${{ steps.parse-plan.outputs.change-count }}     |
            | 🔴 Destroy | ${{ steps.parse-plan.outputs.destroy-count }}     |

            <details>
            <summary>📝 Plan Output</summary>

            ```hcl
            ${{ steps.parse-plan.outputs.plan-output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          comment-tag: 'terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }}'
          mode: upsert
          pr-number: ${{ steps.pr-context.outputs.pr-number }}
        continue-on-error: true

      - name: Create or update PR comment for Apply
        if: inputs.action_type == 'apply' && steps.pr-context.outputs.has-pr == 'true'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 🚀 Terragrunt Apply Completed

            **Project**: ${{ inputs.project_name }}
            **Environment**: `${{ inputs.environment }}`
            **Status**: ${{ steps.parse-apply.outputs.apply-status }}
            **Event**: ${{ github.event_name }}
            ${{ github.event_name == 'push' && format('**Merged PR**: #{0} - {1}', steps.pr-context.outputs.pr-number, steps.pr-context.outputs.pr-title) || '' }}

            ### 📊 Apply Summary

            | Action      | Count |
            | ----------- | ----- |
            | 🟢 Added     | ${{ steps.parse-apply.outputs.added-count }}     |
            | 🟡 Changed   | ${{ steps.parse-apply.outputs.changed-count }}     |
            | 🔴 Destroyed | ${{ steps.parse-apply.outputs.destroyed-count }}     |

            <details>
            <summary>📝 Apply Output</summary>

            ```hcl
            ${{ steps.parse-apply.outputs.apply-output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          comment-tag: 'terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }}'
          mode: upsert
          pr-number: ${{ steps.pr-context.outputs.pr-number }}
        continue-on-error: true

      - name: Log PR comment status
        run: |
          echo "=== PR Comment Status ==="
          echo "Event: ${{ github.event_name }}"
          echo "Action Type: ${{ inputs.action_type }}"
          echo "Has PR: ${{ steps.pr-context.outputs.has-pr }}"
          echo "PR Number: ${{ steps.pr-context.outputs.pr-number }}"
          echo "Context Source: ${{ steps.pr-context.outputs.context-source }}"

          if [ "${{ steps.pr-context.outputs.has-pr }}" == "true" ]; then
            echo "✅ Comment should have been posted to PR #${{ steps.pr-context.outputs.pr-number }}"
          else
            echo "⚠️ Comment was skipped - no PR context available"
            echo "This typically happens when:"
            echo "  - Running on a direct push not associated with a PR"
            echo "  - Running on a branch that was never part of a PR"
            echo "  - The commit is not linked to any PR"
          fi

      - name: Exit with appropriate code
        run: |
          if [ "${{ inputs.action_type }}" == "plan" ]; then
            if [ "${{ steps.plan.outcome }}" == "failure" ]; then
              exit 1
            fi
          else
            if [ "${{ steps.apply.outcome }}" == "failure" ]; then
              exit 1
            fi
          fi
