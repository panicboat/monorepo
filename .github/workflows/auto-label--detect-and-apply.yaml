name: 'Auto Label - Detect Changes and Apply Labels (Pure GHA v4)'

# PR作成・更新時に変更されたファイルを検知し、
# パターンマッチングに基づいてデプロイラベルを付与する
# Pure GitHub Actions implementation (v4)

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  detect-and-label:
    name: 'Detect changes and update PR labels'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Detect file changes with path filters
        id: changes
        uses: dorny/paths-filter@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          filters: |
            terragrunt:
              - '**/terragrunt/**'
            kubernetes:
              - '**/kubernetes/**'

      - name: Manage PR labels with GitHub Script
        id: manage-labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // Service and environment mapping based on path filters
            const serviceEnvironmentMap = {
              'github-oidc-auth-develop': {
                service: 'github-oidc-auth',
                environment: 'develop',
                color: '28a745'
              },
              'github-oidc-auth-production': {
                service: 'github-oidc-auth',
                environment: 'production',
                color: 'dc3545'
              },
              'github-oidc-auth-staging': {
                service: 'github-oidc-auth',
                environment: 'staging',
                color: 'ffc107'
              },
              'github-actions-claude-code-action-monorepo': {
                service: 'github-actions-claude-code-action',
                environment: 'monorepo',
                color: '17a2b8'
              },
              'github-repository-generated-manifests': {
                service: 'github-repository',
                environment: 'generated-manifests',
                color: '6f42c1'
              },
              'github-repository-kubernetes-clusters': {
                service: 'github-repository',
                environment: 'kubernetes-clusters',
                color: '20c997'
              },
              'github-repository-monorepo': {
                service: 'github-repository',
                environment: 'monorepo',
                color: '17a2b8'
              }
            };

            // Get change detection results
            const changes = {
              'github-oidc-auth-develop': '${{ steps.changes.outputs.github-oidc-auth-develop }}' === 'true',
              'github-oidc-auth-production': '${{ steps.changes.outputs.github-oidc-auth-production }}' === 'true',
              'github-oidc-auth-staging': '${{ steps.changes.outputs.github-oidc-auth-staging }}' === 'true',
              'github-actions-claude-code-action-monorepo': '${{ steps.changes.outputs.github-actions-claude-code-action-monorepo }}' === 'true',
              'github-repository-generated-manifests': '${{ steps.changes.outputs.github-repository-generated-manifests }}' === 'true',
              'github-repository-kubernetes-clusters': '${{ steps.changes.outputs.github-repository-kubernetes-clusters }}' === 'true',
              'github-repository-monorepo': '${{ steps.changes.outputs.github-repository-monorepo }}' === 'true'
            };

            console.log('Change detection results:', changes);

            // Generate required labels based on detected changes
            const requiredLabels = [];
            for (const [key, hasChanges] of Object.entries(changes)) {
              if (hasChanges && serviceEnvironmentMap[key]) {
                const { service, environment } = serviceEnvironmentMap[key];
                const label = `deploy:${service}:${environment}`;
                requiredLabels.push(label);
              }
            }

            console.log('Required labels:', requiredLabels);

            // Get current PR labels (only deploy: labels)
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const currentDeployLabels = currentLabels
              .map(label => label.name)
              .filter(name => name.startsWith('deploy:'));

            console.log('Current deploy labels:', currentDeployLabels);

            // Create labels if they don't exist
            for (const labelName of requiredLabels) {
              const key = Object.keys(serviceEnvironmentMap).find(k => {
                const { service, environment } = serviceEnvironmentMap[k];
                return `deploy:${service}:${environment}` === labelName;
              });

              const color = key ? serviceEnvironmentMap[key].color : '0052cc';

              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName
                });
                console.log(`Label ${labelName} already exists`);
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Creating label: ${labelName} with color: #${color}`);
                  try {
                    await github.rest.issues.createLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: labelName,
                      color: color,
                      description: 'Auto-generated deployment label'
                    });
                  } catch (createError) {
                    console.error(`Failed to create label ${labelName}:`, createError.message);
                  }
                }
              }
            }

            // Remove old deploy labels that are no longer needed
            const labelsToRemove = currentDeployLabels.filter(label => !requiredLabels.includes(label));
            for (const label of labelsToRemove) {
              console.log(`Removing label: ${label}`);
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (error) {
                console.error(`Failed to remove label ${label}:`, error.message);
              }
            }

            // Add new required labels
            const labelsToAdd = requiredLabels.filter(label => !currentDeployLabels.includes(label));
            for (const label of labelsToAdd) {
              console.log(`Adding label: ${label}`);
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [label]
                });
              } catch (error) {
                console.error(`Failed to add label ${label}:`, error.message);
              }
            }

            // Store results for comment step
            core.setOutput('required_labels', JSON.stringify(requiredLabels));
            core.setOutput('labels_added', JSON.stringify(labelsToAdd));
            core.setOutput('labels_removed', JSON.stringify(labelsToRemove));
            core.setOutput('has_changes', requiredLabels.length > 0 ? 'true' : 'false');

            return {
              requiredLabels,
              labelsAdded,
              labelsRemoved,
              hasChanges: requiredLabels.length > 0
            };

      - name: Comment on PR with deployment info
        if: steps.manage-labels.outputs.has_changes == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          comment_tag: auto-label-deployment-info
          mode: upsert
          message: |
            ## 🚀 デプロイ対象の検知

            このPRの変更により、以下のサービス・環境がデプロイ対象として検知されました：

            **検知されたラベル:**
            ${{ steps.manage-labels.outputs.required_labels != '[]' && steps.manage-labels.outputs.required_labels != '' && '以下のラベルが自動で付与されました：' || 'デプロイ対象となる変更は検知されませんでした。' }}

            ${{ steps.manage-labels.outputs.required_labels != '[]' && steps.manage-labels.outputs.required_labels != '' && steps.manage-labels.outputs.required_labels || '' }}

            **変更検知の詳細:**
            - 🔍 **Terragrunt 全般**: `${{ steps.changes.outputs.terragrunt }}`
            - 🔑 **GitHub OIDC Auth (develop)**: `${{ steps.changes.outputs.github-oidc-auth-develop }}`
            - 🔑 **GitHub OIDC Auth (production)**: `${{ steps.changes.outputs.github-oidc-auth-production }}`
            - 🔑 **GitHub OIDC Auth (staging)**: `${{ steps.changes.outputs.github-oidc-auth-staging }}`
            - ⚡ **Claude Code Action (monorepo)**: `${{ steps.changes.outputs.github-actions-claude-code-action-monorepo }}`
            - 📦 **GitHub Repository (generated-manifests)**: `${{ steps.changes.outputs.github-repository-generated-manifests }}`
            - 📦 **GitHub Repository (kubernetes-clusters)**: `${{ steps.changes.outputs.github-repository-kubernetes-clusters }}`
            - 📦 **GitHub Repository (monorepo)**: `${{ steps.changes.outputs.github-repository-monorepo }}`

            ### 次のステップ
            - PRをマージすると、対象環境へのデプロイが自動実行されます
            - ラベルを手動で削除することで、特定の環境のデプロイをスキップできます
            - ラベルを手動で追加することで、追加の環境をデプロイ対象に含められます

            ### ラベル管理の変更
            ${{ steps.manage-labels.outputs.labels_added != '[]' && steps.manage-labels.outputs.labels_added != '' && format('**追加されたラベル:** {0}', steps.manage-labels.outputs.labels_added) || '' }}
            ${{ steps.manage-labels.outputs.labels_removed != '[]' && steps.manage-labels.outputs.labels_removed != '' && format('**削除されたラベル:** {0}', steps.manage-labels.outputs.labels_removed) || '' }}

            ---
            *このコメントは Auto Label Pure GHA v4 により自動生成・更新されました*

      - name: Add comment when no changes detected
        if: steps.manage-labels.outputs.has_changes == 'false'
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          comment_tag: auto-label-deployment-info
          mode: upsert
          message: |
            ## ℹ️ デプロイ対象の検知結果

            このPRの変更では、デプロイ対象となるファイルは検知されませんでした。

            **変更検知の詳細:**
            - 🔍 **Terragrunt 全般**: `${{ steps.changes.outputs.terragrunt }}`
            - 🔑 **GitHub OIDC Auth (develop)**: `${{ steps.changes.outputs.github-oidc-auth-develop }}`
            - 🔑 **GitHub OIDC Auth (production)**: `${{ steps.changes.outputs.github-oidc-auth-production }}`
            - 🔑 **GitHub OIDC Auth (staging)**: `${{ steps.changes.outputs.github-oidc-auth-staging }}`
            - ⚡ **Claude Code Action (monorepo)**: `${{ steps.changes.outputs.github-actions-claude-code-action-monorepo }}`
            - 📦 **GitHub Repository (generated-manifests)**: `${{ steps.changes.outputs.github-repository-generated-manifests }}`
            - 📦 **GitHub Repository (kubernetes-clusters)**: `${{ steps.changes.outputs.github-repository-kubernetes-clusters }}`
            - 📦 **GitHub Repository (monorepo)**: `${{ steps.changes.outputs.github-repository-monorepo }}`

            手動でデプロイラベルを追加することで、特定の環境をデプロイ対象に含めることができます。

            ---
            *このコメントは Auto Label Pure GHA v4 により自動生成・更新されました*

      - name: Summary
        run: |
          REQUIRED_LABELS='${{ steps.manage-labels.outputs.required_labels }}'
          HAS_CHANGES='${{ steps.manage-labels.outputs.has_changes }}'

          if [ "$HAS_CHANGES" = "false" ]; then
            echo "✅ 変更検知完了: デプロイ対象なし"
            echo "変更されたファイルにデプロイが必要なものは含まれていません。"
          else
            echo "✅ 変更検知完了: ラベル付与済み"
            echo "検知されたラベル: $REQUIRED_LABELS"
          fi

          echo "Pure GHA v4 による自動ラベル付与が完了しました。"
