name: 'Reusable Terragrunt Orchestrator'

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      action_type:
        required: true
        type: string
        description: 'Action type: plan or apply'

jobs:
  detect-environments:
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed environments
        id: detect
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          ENVIRONMENTS=()

          while IFS= read -r file; do
            if [[ "$file" == *"${{ inputs.project_name }}/terragrunt/envs/"* ]]; then
              env_path=$(echo "$file" | sed "s|.*${{ inputs.project_name }}/terragrunt/envs/||")
              env_name=$(echo "$env_path" | cut -d'/' -f1)

              if [[ -n "$env_name" ]]; then
                echo "Found environment: $env_name (from file: $file)"
                ENVIRONMENTS+=("$env_name")
              fi
            fi
          done <<< "$CHANGED_FILES"

          UNIQUE_ENVIRONMENTS=$(printf '%s\n' "${ENVIRONMENTS[@]}" | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Detected environments: $UNIQUE_ENVIRONMENTS"

          HAS_CHANGES="false"
          if [ "$UNIQUE_ENVIRONMENTS" != "[]" ] && [ "$UNIQUE_ENVIRONMENTS" != "" ]; then
            HAS_CHANGES="true"
          fi

          echo "environments=$UNIQUE_ENVIRONMENTS" >> $GITHUB_OUTPUT
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

  load-configurations:
    name: 'Load Terragrunt Configurations'
    needs: detect-environments
    if: needs.detect-environments.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      config-matrix: ${{ steps.load-configs.outputs.config-matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load configurations for all environments
        id: load-configs
        run: |
          CONFIG_FILE=".github/terragrunt-actions-config.yaml"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          ENVIRONMENTS='${{ needs.detect-environments.outputs.environments }}'
          CONFIG_MATRIX=()

          for env in $(echo "$ENVIRONMENTS" | jq -r '.[]'); do
            PLAN_IAM_ROLE=$(yq e ".$env.iam_role_plan // .default.iam_role_plan" "$CONFIG_FILE")
            APPLY_IAM_ROLE=$(yq e ".$env.iam_role_apply // .default.iam_role_apply" "$CONFIG_FILE")
            AWS_REGION=$(yq e ".$env.aws_region // .default.aws_region // \"us-east-1\"" "$CONFIG_FILE")
            WORKING_DIR=$(yq e ".$env.working_directory // \"\"" "$CONFIG_FILE")

            if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
              POSSIBLE_PATHS=(
                "${{ inputs.project_name }}/terragrunt/envs/$env"
                "*/${{ inputs.project_name }}/terragrunt/envs/$env"
              )

              for path_pattern in "${POSSIBLE_PATHS[@]}"; do
                FOUND_PATH=$(find . -path "./$path_pattern" -type d | head -1)
                if [ -n "$FOUND_PATH" ]; then
                  WORKING_DIR="$FOUND_PATH"
                  break
                fi
              done
            fi

            if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
              echo "Working directory not found for project: ${{ inputs.project_name }}, environment: $env"
              exit 1
            fi

            CONFIG_MATRIX+=("{\"environment\":\"$env\",\"plan_iam_role\":\"$PLAN_IAM_ROLE\",\"apply_iam_role\":\"$APPLY_IAM_ROLE\",\"aws_region\":\"$AWS_REGION\",\"working_directory\":\"$WORKING_DIR\"}")
          done

          MATRIX_JSON=$(printf '%s\n' "${CONFIG_MATRIX[@]}" | jq -s .)
          echo "config-matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  execute-environments:
    name: 'Execute Terragrunt for Environments'
    needs: [detect-environments, load-configurations]
    if: needs.detect-environments.outputs.has_changes == 'true'
    strategy:
      matrix:
        config: ${{ fromJson(needs.load-configurations.outputs.config-matrix) }}
      fail-fast: false
    uses: ./.github/workflows/reusable--terragrunt-single-env.yaml
    secrets: inherit
    with:
      project_name: ${{ inputs.project_name }}
      environment: ${{ matrix.config.environment }}
      action_type: ${{ inputs.action_type }}
      plan_iam_role: ${{ matrix.config.plan_iam_role }}
      apply_iam_role: ${{ matrix.config.apply_iam_role }}
      aws_region: ${{ matrix.config.aws_region }}
      working_directory: ${{ matrix.config.working_directory }}
