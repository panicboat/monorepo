name: Reusable Terragrunt Apply

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Project name for the service'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version'
        required: false
        type: string
        default: '1.5.7'
      terragrunt_version:
        description: 'Terragrunt version'
        required: false
        type: string
        default: '0.53.2'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has-changes: ${{ steps.generate-matrix.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Generate matrix for changed terragrunt environments
        id: generate-matrix
        run: |
          # Get changed files in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)

          # Find terragrunt environment directories that have changes
          TERRAGRUNT_ENVS=""

          # Pattern matching for different directory structures
          for file in $CHANGED_FILES; do
            # Check for **/service/terragrunt/envs/** pattern
            if [[ $file =~ (.*/)?([^/]+)/terragrunt/envs/([^/]+)/.* ]]; then
              prefix="${BASH_REMATCH[1]}"
              service_name="${BASH_REMATCH[2]}"
              env_name="${BASH_REMATCH[3]}"
              terragrunt_env_dir="${prefix}${service_name}/terragrunt/envs/${env_name}"

              # Check if directory actually exists
              if [ -d "$terragrunt_env_dir" ]; then
                if [[ ! $TERRAGRUNT_ENVS =~ $terragrunt_env_dir ]]; then
                  TERRAGRUNT_ENVS="$TERRAGRUNT_ENVS $terragrunt_env_dir"
                fi
              fi
            fi

            # Check for category/service/terragrunt/envs pattern
            if [[ $file =~ ^([^/]+)/([^/]+)/terragrunt/envs/([^/]+)/.* ]]; then
              category="${BASH_REMATCH[1]}"
              service_name="${BASH_REMATCH[2]}"
              env_name="${BASH_REMATCH[3]}"
              terragrunt_env_dir="$category/$service_name/terragrunt/envs/$env_name"

              if [ -d "$terragrunt_env_dir" ]; then
                if [[ ! $TERRAGRUNT_ENVS =~ $terragrunt_env_dir ]]; then
                  TERRAGRUNT_ENVS="$TERRAGRUNT_ENVS $terragrunt_env_dir"
                fi
              fi
            fi
          done

          # Convert to JSON array with environment information
          MATRIX_JSON="[]"
          if [ ! -z "$TERRAGRUNT_ENVS" ]; then
            # Create matrix entries with both path and environment name
            MATRIX_ENTRIES=""
            for env_dir in $TERRAGRUNT_ENVS; do
              if [ ! -z "$env_dir" ]; then
                # Extract environment name from path (last directory name)
                env_name=$(basename "$env_dir")
                # Extract service directory (parent of terragrunt)
                service_dir=$(dirname $(dirname "$env_dir"))

                # Create JSON object for this entry
                entry="{\"env_dir\":\"$env_dir\",\"env_name\":\"$env_name\",\"service_dir\":\"$service_dir\"}"
                if [ -z "$MATRIX_ENTRIES" ]; then
                  MATRIX_ENTRIES="$entry"
                else
                  MATRIX_ENTRIES="$MATRIX_ENTRIES,$entry"
                fi
              fi
            done

            if [ ! -z "$MATRIX_ENTRIES" ]; then
              MATRIX_JSON="[$MATRIX_ENTRIES]"
            fi
          fi

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "has-changes=$([ "$MATRIX_JSON" != "[]" ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

          echo "Detected Terragrunt environment directories: $TERRAGRUNT_ENVS"
          echo "Matrix: $MATRIX_JSON"

  apply:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/reusable-terragrunt-apply-single.yaml
    with:
      project_name: ${{ inputs.project_name }}
      env_dir: ${{ matrix.env_dir }}
      env_name: ${{ matrix.env_name }}
      service_dir: ${{ matrix.service_dir }}
      terraform_version: ${{ inputs.terraform_version }}
      terragrunt_version: ${{ inputs.terragrunt_version }}
