name: 'reusable / terragrunt apply'

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Project name (e.g., claude-code-action)'
        required: true
        type: string
      environment:
        description: 'Environment name (optional, overrides auto-detection)'
        required: false
        type: string
        default: ''
      working_directory:
        description: 'Working directory for Terragrunt'
        required: false
        type: string
        default: ''
      tf_version:
        description: 'Terraform version'
        required: false
        type: string
        default: '1.5.0'
      terragrunt_version:
        description: 'Terragrunt version'
        required: false
        type: string
        default: '0.58.0'
      auto_approve:
        description: 'Auto approve for apply'
        required: false
        type: boolean
        default: true

env:
  TF_VERSION: ${{ inputs.tf_version }}
  TERRAGRUNT_VERSION: ${{ inputs.terragrunt_version }}

jobs:
  load-config:
    name: 'Load Configuration'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      aws_region: ${{ steps.config.outputs.aws_region }}
      apply_role: ${{ steps.config.outputs.apply_role }}
      project_path: ${{ steps.config.outputs.project_path }}
      working_directory: ${{ steps.set-working-dir.outputs.working_directory }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: |
        npm install js-yaml @actions/core

    - name: Load Terragrunt configuration
      id: config
      env:
        PROJECT_NAME: ${{ inputs.project_name }}
      run: node .github/scripts/load-terragrunt-config.js

    - name: Set environment
      id: set-environment
      run: |
        if [ -n "${{ inputs.environment }}" ]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=${{ steps.config.outputs.environment }}" >> $GITHUB_OUTPUT
        fi

    - name: Set working directory
      id: set-working-dir
      run: |
        if [ -n "${{ inputs.working_directory }}" ]; then
          echo "working_directory=${{ inputs.working_directory }}" >> $GITHUB_OUTPUT
        else
          echo "working_directory=./${{ steps.config.outputs.project_path }}" >> $GITHUB_OUTPUT
        fi

  detect-changes:
    name: 'Detect Changes'
    needs: load-config
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        # Get list of changed files
        if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        else
          # First commit or force push
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git show --name-only --format= HEAD)
        fi

        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Check if any relevant files changed
        PROJECT_PATH="${{ needs.load-config.outputs.project_path }}"
        WORKFLOW_PATH=".github/workflows/${{ inputs.project_name }}-terragrunt"

        if echo "$CHANGED_FILES" | grep -E "^${PROJECT_PATH}/" || echo "$CHANGED_FILES" | grep -E "^${WORKFLOW_PATH}"; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in project files"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in project files"
        fi

  terragrunt-apply:
    name: 'Terragrunt Apply'
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ needs.load-config.outputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ needs.load-config.outputs.apply_role }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform-version: ${{ env.TF_VERSION }}

    - name: Setup Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    - name: Terragrunt Apply
      run: |
        if [ "${{ inputs.auto_approve }}" = "true" ]; then
          terragrunt apply --terragrunt-non-interactive -auto-approve
        else
          terragrunt apply --terragrunt-non-interactive
        fi
      working-directory: ${{ needs.load-config.outputs.working_directory }}/envs/${{ needs.load-config.outputs.environment }}
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Terragrunt Deployment Summary - ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.load-config.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto Approve**: ${{ inputs.auto_approve }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region**: ${{ needs.load-config.outputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **IAM Role**: ${{ needs.load-config.outputs.apply_role }}" >> $GITHUB_STEP_SUMMARY
