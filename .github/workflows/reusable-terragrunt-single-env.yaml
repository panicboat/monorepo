name: 'Reusable Terragrunt Single Environment'

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      terraform_version:
        required: false
        type: string
        default: '1.5.7'
        description: 'Terraform version'
      terragrunt_version:
        required: false
        type: string
        default: '0.53.2'
        description: 'Terragrunt version'
      action_type:
        required: true
        type: string
        description: 'Action type: plan or apply'

jobs:
  terragrunt-execution:
    name: '${{ inputs.action_type }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Terragrunt configuration
        id: load-config
        run: |
          CONFIG_FILE=".github/terragrunt-actions-config.yaml"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # 環境固有の設定を取得、なければdefaultを使用
          PLAN_IAM_ROLE=$(yq e ".${{ inputs.environment }}.iam_role_plan // .default.iam_role_plan" "$CONFIG_FILE")
          APPLY_IAM_ROLE=$(yq e ".${{ inputs.environment }}.iam_role_apply // .default.iam_role_apply" "$CONFIG_FILE")
          AWS_REGION=$(yq e ".${{ inputs.environment }}.aws_region // .default.aws_region // \"us-east-1\"" "$CONFIG_FILE")
          WORKING_DIR=$(yq e ".${{ inputs.environment }}.working_directory // \"\"" "$CONFIG_FILE")

          # working_directoryが指定されていない場合は自動検出
          if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
            # 複数パターンを検索
            POSSIBLE_PATHS=(
              "${{ inputs.project_name }}/terragrunt/envs/${{ inputs.environment }}"
              "*/${{ inputs.project_name }}/terragrunt/envs/${{ inputs.environment }}"
            )

            for path_pattern in "${POSSIBLE_PATHS[@]}"; do
              FOUND_PATH=$(find . -path "./$path_pattern" -type d | head -1)
              if [ -n "$FOUND_PATH" ]; then
                WORKING_DIR="$FOUND_PATH"
                break
              fi
            done
          fi

          if [ -z "$WORKING_DIR" ] || [ "$WORKING_DIR" == "null" ]; then
            echo "Working directory not found for project: ${{ inputs.project_name }}, environment: ${{ inputs.environment }}"
            exit 1
          fi

          echo "plan-iam-role=$PLAN_IAM_ROLE" >> $GITHUB_OUTPUT
          echo "apply-iam-role=$APPLY_IAM_ROLE" >> $GITHUB_OUTPUT
          echo "aws-region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "working-directory=$WORKING_DIR" >> $GITHUB_OUTPUT

          echo "Configuration loaded:"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Plan IAM Role: $PLAN_IAM_ROLE"
          echo "  Apply IAM Role: $APPLY_IAM_ROLE"
          echo "  AWS Region: $AWS_REGION"
          echo "  Working Directory: $WORKING_DIR"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action_type == 'plan' && steps.load-config.outputs.plan-iam-role || steps.load-config.outputs.apply-iam-role }}
          aws-region: ${{ steps.load-config.outputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terragrunt Plan
        if: inputs.action_type == 'plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'plan'
          args: '-no-color -detailed-exitcode'
          tg_dir: ${{ steps.load-config.outputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Terragrunt Apply
        if: inputs.action_type == 'apply'
        id: apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'apply'
          args: '-auto-approve -no-color'
          tg_dir: ${{ steps.load-config.outputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ steps.load-config.outputs.aws-region }}

      - name: Parse Plan Results
        if: inputs.action_type == 'plan' && always()
        id: parse-plan
        run: |
          # Planの結果を解析
          if [ "${{ steps.plan.outcome }}" == "success" ]; then
            PLAN_STATUS="✅ Success"
          else
            PLAN_STATUS="❌ Failed"
          fi

          # Terragrunt Actionの標準出力を取得
          # GitHub Actionsログから直接出力を取得する代替方法
          PLAN_OUTPUT="Plan execution completed. See workflow logs for detailed output."

          # デフォルト値を設定
          ADD_COUNT="0"
          CHANGE_COUNT="0"
          DESTROY_COUNT="0"

          # 出力を制限（30,000文字まで）
          if [ ${#PLAN_OUTPUT} -gt 30000 ]; then
            PLAN_OUTPUT="${PLAN_OUTPUT:0:30000}... (output truncated, see workflow logs for full details)"
          fi

          {
            echo "plan-status=$PLAN_STATUS"
            echo "add-count=$ADD_COUNT"
            echo "change-count=$CHANGE_COUNT"
            echo "destroy-count=$DESTROY_COUNT"
            echo "plan-output<<EOF"
            echo "$PLAN_OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Parse Apply Results
        if: inputs.action_type == 'apply' && always()
        id: parse-apply
        run: |
          # Applyの結果を解析
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            APPLY_STATUS="✅ Success"
          else
            APPLY_STATUS="❌ Failed"
          fi

          # Terragrunt Actionの標準出力を取得
          APPLY_OUTPUT="Apply execution completed. See workflow logs for detailed output."

          # デフォルト値を設定
          ADDED_COUNT="0"
          CHANGED_COUNT="0"
          DESTROYED_COUNT="0"

          # 出力を制限（20,000文字まで）
          if [ ${#APPLY_OUTPUT} -gt 20000 ]; then
            APPLY_OUTPUT="${APPLY_OUTPUT:0:20000}... (output truncated, see workflow logs for full details)"
          fi

          {
            echo "apply-status=$APPLY_STATUS"
            echo "added-count=$ADDED_COUNT"
            echo "changed-count=$CHANGED_COUNT"
            echo "destroyed-count=$DESTROYED_COUNT"
            echo "apply-output<<EOF"
            echo "$APPLY_OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Find existing comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }}'

      - name: Create or update PR comment for Plan
        if: github.event_name == 'pull_request' && inputs.action_type == 'plan'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 📋 Terragrunt Plan Results

            <!-- terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }} -->

            **Project**: ${{ inputs.project_name }}
            **Environment**: `${{ inputs.environment }}`
            **Directory**: `${{ steps.load-config.outputs.working-directory }}`
            **IAM Role (Plan)**: ${{ steps.load-config.outputs.plan-iam-role }}
            **AWS Region**: ${{ steps.load-config.outputs.aws-region }}
            **Status**: ${{ steps.parse-plan.outputs.plan-status }}

            ### 📊 Plan Summary

            | Action    | Count |
            | --------- | ----- |
            | 🟢 Add     | ${{ steps.parse-plan.outputs.add-count }}     |
            | 🟡 Change  | ${{ steps.parse-plan.outputs.change-count }}     |
            | 🔴 Destroy | ${{ steps.parse-plan.outputs.destroy-count }}     |

            <details>
            <summary>📝 Plan Output</summary>

            ```
            ${{ steps.parse-plan.outputs.plan-output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace

      - name: Create or update PR comment for Apply
        if: github.event_name == 'pull_request' && inputs.action_type == 'apply'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🚀 Terragrunt Apply Completed

            <!-- terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }} -->

            **Project**: ${{ inputs.project_name }}
            **Environment**: `${{ inputs.environment }}`
            **Status**: ${{ steps.parse-apply.outputs.apply-status }}

            ### 📊 Apply Summary

            | Action      | Count |
            | ----------- | ----- |
            | 🟢 Added     | ${{ steps.parse-apply.outputs.added-count }}     |
            | 🟡 Changed   | ${{ steps.parse-apply.outputs.changed-count }}     |
            | 🔴 Destroyed | ${{ steps.parse-apply.outputs.destroyed-count }}     |

            <details>
            <summary>📝 Apply Output</summary>

            ```
            ${{ steps.parse-apply.outputs.apply-output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace

      - name: Exit with appropriate code
        run: |
          if [ "${{ inputs.action_type }}" == "plan" ]; then
            if [ "${{ steps.plan.outcome }}" == "failure" ]; then
              exit 1
            fi
          else
            if [ "${{ steps.apply.outcome }}" == "failure" ]; then
              exit 1
            fi
          fi
