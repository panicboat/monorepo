name: 'reusable / terragrunt plan'

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Project name (e.g., claude-code-action)'
        required: true
        type: string
      environment:
        description: 'Environment name (optional, overrides auto-detection)'
        required: false
        type: string
        default: ''
      working_directory:
        description: 'Working directory for Terragrunt'
        required: false
        type: string
        default: ''
      tf_version:
        description: 'Terraform version'
        required: false
        type: string
        default: '1.5.0'
      terragrunt_version:
        description: 'Terragrunt version'
        required: false
        type: string
        default: '0.58.0'
      enable_format_check:
        description: 'Enable Terragrunt format check'
        required: false
        type: boolean
        default: true
      enable_validate:
        description: 'Enable Terragrunt validate'
        required: false
        type: boolean
        default: true

env:
  TF_VERSION: ${{ inputs.tf_version }}
  TERRAGRUNT_VERSION: ${{ inputs.terragrunt_version }}

jobs:
  load-config:
    name: 'Load Configuration'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      aws_region: ${{ steps.config.outputs.aws_region }}
      plan_role: ${{ steps.config.outputs.plan_role }}
      project_path: ${{ steps.config.outputs.project_path }}
      working_directory: ${{ steps.set-working-dir.outputs.working_directory }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install js-yaml @actions/core

    - name: Load Terragrunt configuration
      id: config
      env:
        PROJECT_NAME: ${{ inputs.project_name }}
      run: node .github/scripts/load-terragrunt-config.js

    - name: Set environment
      id: set-environment
      run: |
        if [ -n "${{ inputs.environment }}" ]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=${{ steps.config.outputs.environment }}" >> $GITHUB_OUTPUT
        fi

    - name: Set working directory
      id: set-working-dir
      run: |
        if [ -n "${{ inputs.working_directory }}" ]; then
          echo "working_directory=${{ inputs.working_directory }}" >> $GITHUB_OUTPUT
        else
          echo "working_directory=./${{ steps.config.outputs.project_path }}" >> $GITHUB_OUTPUT
        fi

  detect-changes:
    name: 'Detect Changes'
    needs: load-config
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        # Get list of changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        fi

        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Check if any relevant files changed
        PROJECT_PATH="${{ needs.load-config.outputs.project_path }}"
        WORKFLOW_PATH=".github/workflows/${{ inputs.project_name }}-terragrunt"

        if echo "$CHANGED_FILES" | grep -E "^${PROJECT_PATH}/" || echo "$CHANGED_FILES" | grep -E "^${WORKFLOW_PATH}"; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in project files"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in project files"
        fi

  terragrunt-plan:
    name: 'Terragrunt Plan'
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ needs.load-config.outputs.plan_role }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform-version: ${{ env.TF_VERSION }}

    - name: Setup Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    - name: Terragrunt Format Check
      if: inputs.enable_format_check
      run: terragrunt hclfmt --terragrunt-check --terragrunt-diff
      working-directory: ${{ needs.load-config.outputs.working_directory }}
      continue-on-error: true

    - name: Terragrunt Validate
      if: inputs.enable_validate
      run: terragrunt validate-inputs
      working-directory: ${{ needs.load-config.outputs.working_directory }}/envs/${{ needs.load-config.outputs.environment }}

    - name: Terragrunt Plan
      id: plan
      run: terragrunt plan -parallelism=1 --terragrunt-non-interactive -out=tfplan
      working-directory: ${{ needs.load-config.outputs.working_directory }}/envs/${{ needs.load-config.outputs.environment }}
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      continue-on-error: true

    - name: Save Plan Output
      if: github.event_name == 'pull_request'
      run: |
        terragrunt show -no-color tfplan > plan_output.txt 2>&1 || echo "Plan output not available" > plan_output.txt
      working-directory: ${{ needs.load-config.outputs.working_directory }}/envs/${{ needs.load-config.outputs.environment }}

    - name: Update Pull Request Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          const path = '${{ needs.load-config.outputs.working_directory }}/envs/${{ needs.load-config.outputs.environment }}/plan_output.txt';
          let planOutput = 'Plan output not available';

          try {
            if (fs.existsSync(path)) {
              planOutput = fs.readFileSync(path, 'utf8');
            }
          } catch (error) {
            console.log('Error reading plan output:', error);
          }

          const output = `## ðŸš€ Terragrunt Plan - ${{ inputs.project_name }}

          #### Project: \`${{ inputs.project_name }}\`
          #### Environment: \`${{ needs.load-config.outputs.environment }}\`
          #### Branch: \`${{ github.head_ref || github.ref_name }}\`
          #### Terragrunt Plan: \`${{ steps.plan.outcome }}\`

          <details><summary>ðŸ“‹ Show Plan Output</summary>

          \`\`\`terraform
          ${planOutput.slice(0, 8000)}${planOutput.length > 8000 ? '\n\n... (truncated - check logs for full output)' : ''}
          \`\`\`

          </details>

          ---
          *ðŸ¤– Automated by: \`${{ github.workflow }}\` | Environment: \`${{ needs.load-config.outputs.environment }}\`*
          `;

          // Find existing comment for this project and environment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingComment = comments.data.find(comment =>
            comment.body.includes(`Project: \`${{ inputs.project_name }}\``) &&
            comment.body.includes(`Environment: \`${{ needs.load-config.outputs.environment }}\``) &&
            comment.body.includes('Terragrunt Plan')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    - name: Terragrunt Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
