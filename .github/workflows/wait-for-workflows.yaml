name: Wait for Workflows
on:
  pull_request:
    branches-ignore:
      - main

jobs:
  wait-for-workflows:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pull-requests: write
      actions: read
      checks: read
    steps:

    - name: Get GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
        permission-actions: read
        permission-checks: read
        permission-pull-requests: write

    - name: Wait for all workflows to complete
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        running-workflow-name: 'wait-for-workflows'
        repo-token: ${{ steps.app-token.outputs.token }}
        allowed-conclusions: success,failure,skipped,cancelled
        wait-interval: 10
      continue-on-error: true

    - name: Get GitHub App slug
      uses: actions/github-script@v7
      id: app-info
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          const { data: app } = await github.rest.apps.getAuthenticated();
          core.setOutput('app-slug', app.slug);
          console.log(`GitHub App slug: ${app.slug}`);

    - name: Generate comment content
      run: |
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        OVERALL_STATUS="${{ steps.workflow-status.outputs.overall-status }}"
        SUCCESS_COUNT="${{ steps.workflow-status.outputs.success-count }}"
        FAILURE_COUNT="${{ steps.workflow-status.outputs.failure-count }}"
        IN_PROGRESS_COUNT="${{ steps.workflow-status.outputs.in-progress-count }}"
        TOTAL_COUNT="${{ steps.workflow-status.outputs.total-count }}"

        {
          echo "<!-- WORKFLOW_STATUS_COMMENT -->"
          echo "## üîÑ Workflow Status Report"
          echo ""
          echo "**Last updated:** $TIMESTAMP"
          echo "**Commit:** \`${{ github.event.pull_request.head.sha }}\`"
          echo ""

          case "$OVERALL_STATUS" in
            "success")
              echo "### ‚úÖ All Workflows Passed!"
              echo ""
              echo "üéâ **Status:** All $TOTAL_COUNT workflows completed successfully"
              ;;
            "failure")
              echo "### ‚ùå Some Workflows Failed"
              echo ""
              echo "üìä **Summary:**"
              echo "- ‚úÖ Success: $SUCCESS_COUNT"
              echo "- ‚ùå Failed: $FAILURE_COUNT"
              echo "- üìã Total: $TOTAL_COUNT"
              ;;
            "in_progress")
              echo "### ‚è≥ Workflows Still Running"
              echo ""
              echo "üìä **Summary:**"
              echo "- ‚úÖ Success: $SUCCESS_COUNT"
              echo "- ‚ùå Failed: $FAILURE_COUNT"
              echo "- ‚è≥ In Progress: $IN_PROGRESS_COUNT"
              echo "- üìã Total: $TOTAL_COUNT"
              ;;
            *)
              echo "### ‚ùì No Workflows Found"
              echo ""
              echo "No workflows found for this commit."
              ;;
          esac

          echo ""
          echo "### üìã Workflow Details"
          echo ""

          if [[ -s workflow_results.json ]]; then
            echo "| Workflow | Status | Result |"
            echo "|----------|---------|--------|"

            jq -r '. as $item |
              if .conclusion == "success" then "‚úÖ"
              elif .conclusion == "failure" then "‚ùå"
              elif .status == "in_progress" then "‚è≥"
              else "‚è∏Ô∏è" end as $icon |
              .conclusion // .status as $result |
              "| [\(.name)](\(.html_url)) | \($icon) | \($result) |"' workflow_results.json
          else
            echo "No workflow data available."
          fi

          echo ""
          echo "---"
          echo "*This comment is automatically updated when workflow status changes.*"

        } > comment_body.md

        echo "Generated comment:"
        cat comment_body.md

    - name: Get GitHub App slug (github-script)
      uses: actions/github-script@v7
      id: app-info-script
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          try {
            const { data: app } = await github.rest.apps.getAuthenticated();

            console.log(`App Name: ${app.name}`);
            console.log(`App Slug: ${app.slug}`);
            console.log(`App ID: ${app.id}`);

            core.setOutput('app-slug', app.slug);
            core.setOutput('app-name', app.name);
            core.setOutput('app-id', app.id);

          } catch (error) {
            console.error('Error getting app info:', error);

            try {
              const { data: installation } = await github.rest.apps.getInstallation({
                installation_id: context.payload.installation.id
              });

              console.log(`App slug from installation: ${installation.app_slug}`);
              core.setOutput('app-slug', installation.app_slug);

            } catch (installationError) {
              console.error('Error getting installation info:', installationError);
              core.setFailed(`Failed to get app slug: ${error.message}`);
            }
          }

    - name: Find existing comment
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        token: ${{ steps.app-token.outputs.token }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: '${{ steps.app-info.outputs.app-slug }}'
        body-includes: '<!-- WORKFLOW_STATUS_COMMENT -->'

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ steps.app-token.outputs.token }}
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-path: comment_body.md
        edit-mode: replace

    - name: Notify Slack on failure
      if: steps.workflow-status.outputs.overall-status == 'failure'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C1234567890'
        slack-message: |
          üö® Some workflows failed in PR #${{ github.event.pull_request.number }}

          üìä Summary:
          - ‚úÖ Success: ${{ steps.workflow-status.outputs.success-count }}
          - ‚ùå Failed: ${{ steps.workflow-status.outputs.failure-count }}
          - üìã Total: ${{ steps.workflow-status.outputs.total-count }}

          üë§ Author: ${{ github.event.pull_request.user.login }}
          üîó PR: ${{ github.event.pull_request.html_url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Notify Slack on success
      if: steps.workflow-status.outputs.overall-status == 'success'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C1234567890'
        slack-message: |
          üéâ All workflows passed for PR #${{ github.event.pull_request.number }}

          ‚úÖ **Status:** All ${{ steps.workflow-status.outputs.total-count }} workflows completed successfully

          üìù **Title:** ${{ github.event.pull_request.title }}
          üë§ **Author:** ${{ github.event.pull_request.user.login }}
          üè∑Ô∏è **Branch:** ${{ github.event.pull_request.head.ref }}
          üîó **PR:** ${{ github.event.pull_request.html_url }}

          Ready for review and merge! üöÄ
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Fail if workflows failed
      if: steps.workflow-status.outputs.overall-status == 'failure'
      run: |
        echo "‚ùå Some workflows failed - failing this workflow as well"
        exit 1

    - name: Success actions
      if: steps.workflow-status.outputs.overall-status == 'success'
      run: |
        echo "‚úÖ All workflows passed successfully!"
        echo "PR #${{ github.event.pull_request.number }} is ready for review and merge."
