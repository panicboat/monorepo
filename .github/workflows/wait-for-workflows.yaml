name: Wait for Workflows
on:
  pull_request:
    branches-ignore:
      - main

jobs:
  wait-for-workflows:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pull-requests: write
      actions: read
      checks: read
    steps:

    - name: Get GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
        permission-actions: read
        permission-checks: read
        permission-pull-requests: write

    - name: Wait for all workflows to complete
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        running-workflow-name: 'wait-for-workflows'
        repo-token: ${{ steps.app-token.outputs.token }}
        allowed-conclusions: success,failure,skipped,cancelled
        wait-interval: 10
      continue-on-error: true

    - name: Get all workflow statuses
      uses: actions/github-script@v7
      id: workflow-status
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          const headSha = '${{ github.event.pull_request.head.sha }}';

          console.log(`Getting workflow status for PR #${prNumber}`);
          console.log(`Head SHA: ${headSha}`);

          try {
            // ワークフロー実行一覧を取得
            const { data } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: headSha
            });

            console.log(`Total workflow runs found: ${data.workflow_runs.length}`);

            const relevantRuns = data.workflow_runs.filter(run =>
              run.name !== 'Wait for Workflows'
            );

            console.log(`Relevant workflow runs: ${relevantRuns.length}`);

            relevantRuns.forEach(run => {
              console.log(`- ${run.name}: status=${run.status}, conclusion=${run.conclusion}`);
            });

            const successCount = relevantRuns.filter(run => run.conclusion === 'success').length;
            const failureCount = relevantRuns.filter(run => run.conclusion === 'failure').length;
            const inProgressCount = relevantRuns.filter(run => run.status === 'in_progress').length;
            const totalCount = relevantRuns.length;

            console.log(`Counts - Success: ${successCount}, Failure: ${failureCount}, In Progress: ${inProgressCount}, Total: ${totalCount}`);

            let overallStatus = 'unknown';
            if (inProgressCount > 0) {
              overallStatus = 'in_progress';
            } else if (failureCount > 0) {
              overallStatus = 'failure';
            } else if (successCount === totalCount && totalCount > 0) {
              overallStatus = 'success';
            }

            console.log(`Overall status: ${overallStatus}`);

            core.setOutput('success-count', successCount);
            core.setOutput('failure-count', failureCount);
            core.setOutput('in-progress-count', inProgressCount);
            core.setOutput('total-count', totalCount);
            core.setOutput('overall-status', overallStatus);

            const workflowDetails = relevantRuns.map(run => ({
              name: run.name,
              status: run.status,
              conclusion: run.conclusion,
              html_url: run.html_url
            }));
            core.setOutput('workflows', JSON.stringify(workflowDetails));

          } catch (error) {
            console.error('Error fetching workflow runs:', error);
            core.setFailed(`Failed to get workflow status: ${error.message}`);
          }

    - name: Generate comment content
      run: |
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        OVERALL_STATUS="${{ steps.workflow-status.outputs.overall-status }}"
        SUCCESS_COUNT="${{ steps.workflow-status.outputs.success-count }}"
        FAILURE_COUNT="${{ steps.workflow-status.outputs.failure-count }}"
        IN_PROGRESS_COUNT="${{ steps.workflow-status.outputs.in-progress-count }}"
        TOTAL_COUNT="${{ steps.workflow-status.outputs.total-count }}"

        {
          echo "<!-- WORKFLOW_STATUS_COMMENT -->"
          echo "## 🔄 Workflow Status Report"
          echo ""
          echo "**Last updated:** $TIMESTAMP"
          echo "**Commit:** \`${{ github.event.pull_request.head.sha }}\`"
          echo ""

          case "$OVERALL_STATUS" in
            "success")
              echo "### ✅ All Workflows Passed!"
              echo ""
              echo "🎉 **Status:** All $TOTAL_COUNT workflows completed successfully"
              ;;
            "failure")
              echo "### ❌ Some Workflows Failed"
              echo ""
              echo "📊 **Summary:**"
              echo "- ✅ Success: $SUCCESS_COUNT"
              echo "- ❌ Failed: $FAILURE_COUNT"
              echo "- 📋 Total: $TOTAL_COUNT"
              ;;
            "in_progress")
              echo "### ⏳ Workflows Still Running"
              echo ""
              echo "📊 **Summary:**"
              echo "- ✅ Success: $SUCCESS_COUNT"
              echo "- ❌ Failed: $FAILURE_COUNT"
              echo "- ⏳ In Progress: $IN_PROGRESS_COUNT"
              echo "- 📋 Total: $TOTAL_COUNT"
              ;;
            *)
              echo "### ❓ No Workflows Found"
              echo ""
              echo "No workflows found for this commit."
              ;;
          esac

          echo ""
          echo "### 📋 Workflow Details"
          echo ""

          if [[ -s workflow_results.json ]]; then
            echo "| Workflow | Status | Result |"
            echo "|----------|---------|--------|"

            jq -r '. as $item |
              if .conclusion == "success" then "✅"
              elif .conclusion == "failure" then "❌"
              elif .status == "in_progress" then "⏳"
              else "⏸️" end as $icon |
              .conclusion // .status as $result |
              "| [\(.name)](\(.html_url)) | \($icon) | \($result) |"' workflow_results.json
          else
            echo "No workflow data available."
          fi

          echo ""
          echo "---"
          echo "*This comment is automatically updated when workflow status changes.*"

        } > comment_body.md

        echo "Generated comment:"
        cat comment_body.md

    - name: Get GitHub App slug (github-script)
      uses: actions/github-script@v7
      id: app-info-script
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          try {
            const { data: app } = await github.rest.apps.getAuthenticated();

            console.log(`App Name: ${app.name}`);
            console.log(`App Slug: ${app.slug}`);
            console.log(`App ID: ${app.id}`);

            core.setOutput('app-slug', app.slug);
            core.setOutput('app-name', app.name);
            core.setOutput('app-id', app.id);

          } catch (error) {
            console.error('Error getting app info:', error);

            try {
              const { data: installation } = await github.rest.apps.getInstallation({
                installation_id: context.payload.installation.id
              });

              console.log(`App slug from installation: ${installation.app_slug}`);
              core.setOutput('app-slug', installation.app_slug);

            } catch (installationError) {
              console.error('Error getting installation info:', installationError);
              core.setFailed(`Failed to get app slug: ${error.message}`);
            }
          }

    - name: Find existing comment
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        token: ${{ steps.app-token.outputs.token }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: '${{ steps.app-info.outputs.app-slug }}'
        body-includes: '<!-- WORKFLOW_STATUS_COMMENT -->'

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ steps.app-token.outputs.token }}
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body-path: comment_body.md
        edit-mode: replace

    - name: Notify Slack on failure
      if: steps.workflow-status.outputs.overall-status == 'failure'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C1234567890'
        slack-message: |
          🚨 Some workflows failed in PR #${{ github.event.pull_request.number }}

          📊 Summary:
          - ✅ Success: ${{ steps.workflow-status.outputs.success-count }}
          - ❌ Failed: ${{ steps.workflow-status.outputs.failure-count }}
          - 📋 Total: ${{ steps.workflow-status.outputs.total-count }}

          👤 Author: ${{ github.event.pull_request.user.login }}
          🔗 PR: ${{ github.event.pull_request.html_url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Notify Slack on success
      if: steps.workflow-status.outputs.overall-status == 'success'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C1234567890'
        slack-message: |
          🎉 All workflows passed for PR #${{ github.event.pull_request.number }}

          ✅ **Status:** All ${{ steps.workflow-status.outputs.total-count }} workflows completed successfully

          📝 **Title:** ${{ github.event.pull_request.title }}
          👤 **Author:** ${{ github.event.pull_request.user.login }}
          🏷️ **Branch:** ${{ github.event.pull_request.head.ref }}
          🔗 **PR:** ${{ github.event.pull_request.html_url }}

          Ready for review and merge! 🚀
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Fail if workflows failed
      if: steps.workflow-status.outputs.overall-status == 'failure'
      run: |
        echo "❌ Some workflows failed - failing this workflow as well"
        exit 1

    - name: Success actions
      if: steps.workflow-status.outputs.overall-status == 'success'
      run: |
        echo "✅ All workflows passed successfully!"
        echo "PR #${{ github.event.pull_request.number }} is ready for review and merge."
