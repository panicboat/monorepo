name: 'Reusable - Kubernetes Executor'

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: 'Service name for kubernetes manifest generation'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      source-path:
        required: true
        type: string
        description: 'Source path for kustomize build (e.g., demo-service/kubernetes/overlays/develop)'
      target-repository:
        required: false
        type: string
        default: panicboat/generated-manifests
        description: 'Target repository for generated manifests (e.g., panicboat/generated-manifests)'
      target-branch:
        required: false
        type: string
        default: main
        description: 'Target branch for generated manifests'
      action-type:
        required: false
        type: string
        default: diff
        description: 'Action type: diff (plan/preview) or apply (execute)'
    secrets:
      APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App private key for authentication'

jobs:
  build-manifests:
    name: 'Build Kubernetes Manifests'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.build.outputs.status }}
      output-file: ${{ steps.build.outputs.output-file }}
      build-failed: ${{ steps.build.outputs.build-failed }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Build Kubernetes manifests
        id: build
        uses: ./.github/actions/build-kubernetes-manifests
        with:
          source-path: ${{ inputs.source-path }}
          service-name: ${{ inputs.service-name }}

  deploy-to-gitops:
    name: 'Deploy to GitOps Repository'
    needs: build-manifests
    if: needs.build-manifests.outputs.build-failed == 'false' && inputs.action-type == 'apply'
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.deploy.outputs.pr-number }}
      has-changes: ${{ steps.deploy.outputs.has-changes }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Deploy to GitOps repository
        id: deploy
        uses: ./.github/actions/deploy-to-gitops
        with:
          manifest-file: ${{ needs.build-manifests.outputs.output-file }}
          target-repository: ${{ inputs.target-repository }}
          target-branch: ${{ inputs.target-branch }}
          service-name: ${{ inputs.service-name }}
          environment: ${{ inputs.environment }}
          github-token: ${{ steps.app-token.outputs.token }}

  notify-results:
    name: 'Notify Results'
    needs: [build-manifests, deploy-to-gitops]
    if: always() && inputs.action-type == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get source PR information
        id: pr-info
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          state: all
        continue-on-error: true

      - name: Update source PR with results
        if: steps.pr-info.outputs.number != ''
        uses: ./.github/actions/notify-kubernetes-results
        with:
          build-status: ${{ needs.build-manifests.outputs.status }}
          build-failed: ${{ needs.build-manifests.outputs.build-failed }}
          pr-number: ${{ needs.deploy-to-gitops.outputs.pr-number }}
          has-changes: ${{ needs.deploy-to-gitops.outputs.has-changes }}
          service-name: ${{ inputs.service-name }}
          environment: ${{ inputs.environment }}
          target-repository: ${{ inputs.target-repository }}
          target-branch: ${{ inputs.target-branch }}
          source-path: ${{ inputs.source-path }}
          source-pr-number: ${{ steps.pr-info.outputs.number }}
          github-token: ${{ steps.app-token.outputs.token }}

  exit-with-status:
    name: 'Exit with Appropriate Status'
    needs: [build-manifests, deploy-to-gitops]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check final status
        run: |
          if [ "${{ needs.build-manifests.outputs.build-failed }}" == "true" ]; then
            echo "::error::Kubernetes manifest generation failed for ${{ inputs.service-name }}:${{ inputs.environment }}"
            exit 1
          fi

          if [ "${{ needs.build-manifests.outputs.build-failed }}" == "false" ] && [ "${{ needs.deploy-to-gitops.outputs.has-changes }}" == "true" ]; then
            echo "✅ Successfully created GitOps PR for ${{ inputs.service-name }}:${{ inputs.environment }}"
          elif [ "${{ needs.build-manifests.outputs.build-failed }}" == "false" ]; then
            echo "ℹ️ No changes detected for ${{ inputs.service-name }}:${{ inputs.environment }}"
          fi
