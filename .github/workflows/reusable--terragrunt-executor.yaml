name: 'Reusable - Terragrunt Executor'

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      terraform-version:
        required: false
        type: string
        default: '1.12.1'
        description: 'Terraform version'
      terragrunt-version:
        required: false
        type: string
        default: '0.81.0'
        description: 'Terragrunt version'
      action-type:
        required: true
        type: string
        description: 'Action type: plan or apply'
      plan-iam-role:
        required: true
        type: string
        description: 'IAM role for plan operations'
      apply-iam-role:
        required: true
        type: string
        description: 'IAM role for apply operations'
      aws-region:
        required: true
        type: string
        description: 'AWS region'
      working-directory:
        required: true
        type: string
        description: 'Working directory for terragrunt execution'
    secrets:
      APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App private key for authentication'

jobs:
  terragrunt-execution:
    name: '${{ inputs.action-type }} - ${{ inputs.project-name }}:${{ inputs.environment }}'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate working directory
        run: |
          if [ ! -d "${{ inputs.working-directory }}" ]; then
            echo "::error::Working directory '${{ inputs.working-directory }}' does not exist"
            echo "This may indicate a configuration issue or the service structure has changed."
            exit 1
          fi
          echo "âœ… Working directory validated: ${{ inputs.working-directory }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: Setup Terragrunt Binary
        run: |
          TG_VERSION=${{ inputs.terragrunt-version }}
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Terragrunt Plan
        if: inputs.action-type == 'plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform-version }}
          tg_version: ${{ inputs.terragrunt-version }}
          tg_command: 'plan'
          tg_comment: 1
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

      - name: Terragrunt Apply
        if: inputs.action-type == 'apply'
        id: apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform-version }}
          tg_version: ${{ inputs.terragrunt-version }}
          tg_command: 'apply'
          tg_comment: 1
          tg_add_approve: 1
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
