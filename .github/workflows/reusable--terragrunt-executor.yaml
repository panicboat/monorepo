name: 'Reusable - Terragrunt Executor'

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      action-type:
        required: true
        type: string
        description: 'Action type: plan or apply'
      plan-iam-role:
        required: true
        type: string
        description: 'IAM role for plan operations'
      apply-iam-role:
        required: true
        type: string
        description: 'IAM role for apply operations'
      aws-region:
        required: true
        type: string
        description: 'AWS region'
      working-directory:
        required: true
        type: string
        description: 'Working directory for terragrunt execution'
    secrets:
      APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App private key for authentication'

jobs:
  validate-setup:
    name: 'Validate Setup'
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.validate.outputs.is-valid }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Validate working directory
        id: validate
        run: |
          if [ ! -d "${{ inputs.working-directory }}" ]; then
            echo "::error::Working directory '${{ inputs.working-directory }}' does not exist"
            echo "This may indicate a configuration issue or the service structure has changed."
            echo "is-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ Working directory validated: ${{ inputs.working-directory }}"
          echo "is-valid=true" >> $GITHUB_OUTPUT

  execute-terragrunt:
    name: 'Execute Terragrunt'
    needs: validate-setup
    if: needs.validate-setup.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      execution-status: ${{ steps.parse.outputs.status }}
      execution-output: ${{ steps.parse.outputs.output }}
      is-failed: ${{ steps.parse.outputs.is-failed }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Execute Terragrunt ${{ inputs.action-type }}
        id: terragrunt
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: '1.12.2'
          tg_version: '0.81.6'
          tg_command: ${{ inputs.action-type }}
          tg_add_approve: ${{ inputs.action-type == 'apply' && '1' || '' }}
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

      - name: Parse execution results
        if: always()
        id: parse
        uses: ./.github/actions/parse-terragrunt-results
        with:
          terragrunt-outcome: ${{ steps.terragrunt.outcome }}
          terragrunt-output: ${{ steps.terragrunt.outputs.tg_action_output }}
          action-type: ${{ inputs.action-type }}

  notify-results:
    name: 'Notify Results'
    needs: [validate-setup, execute-terragrunt]
    if: always() && needs.validate-setup.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get current PR information
        id: pr-info
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          state: all
        continue-on-error: true

      - name: Update PR with execution results
        if: steps.pr-info.outputs.number
        uses: ./.github/actions/notify-terragrunt-results
        with:
          action-type: ${{ inputs.action-type }}
          project-name: ${{ inputs.project-name }}
          environment: ${{ inputs.environment }}
          working-directory: ${{ inputs.working-directory }}
          status: ${{ needs.execute-terragrunt.outputs.execution-status }}
          output: ${{ needs.execute-terragrunt.outputs.execution-output }}
          pr-number: ${{ steps.pr-info.outputs.number }}
          github-token: ${{ steps.app-token.outputs.token }}

  exit-with-status:
    name: 'Exit with Appropriate Status'
    needs: [validate-setup, execute-terragrunt]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check final status
        run: |
          if [ "${{ needs.validate-setup.outputs.is-valid }}" != "true" ]; then
            echo "::error::Setup validation failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
            exit 1
          fi

          if [ "${{ needs.execute-terragrunt.outputs.is-failed }}" == "true" ]; then
            echo "::error::Terragrunt ${{ inputs.action-type }} failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
            exit 1
          fi

          echo "✅ Terragrunt ${{ inputs.action-type }} completed successfully for ${{ inputs.project-name }}:${{ inputs.environment }}"
