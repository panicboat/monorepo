name: 'Reusable - Terragrunt Executor'

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      terraform-version:
        required: false
        type: string
        default: '1.12.1'
        description: 'Terraform version'
      terragrunt-version:
        required: false
        type: string
        default: '0.81.0'
        description: 'Terragrunt version'
      action-type:
        required: true
        type: string
        description: 'Action type: plan or apply'
      plan-iam-role:
        required: true
        type: string
        description: 'IAM role for plan operations'
      apply-iam-role:
        required: true
        type: string
        description: 'IAM role for apply operations'
      aws-region:
        required: true
        type: string
        description: 'AWS region'
      working-directory:
        required: true
        type: string
        description: 'Working directory for terragrunt execution'
    secrets:
      APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App private key for authentication'

jobs:
  terragrunt-execution:
    name: '${{ inputs.action-type }} - ${{ inputs.project-name }}:${{ inputs.environment }}'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate working directory
        run: |
          if [ ! -d "${{ inputs.working-directory }}" ]; then
            echo "::error::Working directory '${{ inputs.working-directory }}' does not exist"
            echo "This may indicate a configuration issue or the service structure has changed."
            exit 1
          fi
          echo "‚úÖ Working directory validated: ${{ inputs.working-directory }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: Setup Terragrunt Binary
        run: |
          TG_VERSION=${{ inputs.terragrunt-version }}
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Terragrunt Plan
        if: inputs.action-type == 'plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform-version }}
          tg_version: ${{ inputs.terragrunt-version }}
          tg_command: 'plan'
          args: '-no-color -detailed-exitcode'
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

      - name: Terragrunt Apply
        if: inputs.action-type == 'apply'
        id: apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform-version }}
          tg_version: ${{ inputs.terragrunt-version }}
          tg_command: 'apply'
          args: '-auto-approve -no-color'
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

      - name: Parse Results
        if: always()
        id: parse-results
        run: |
          if [ "${{ inputs.action-type }}" == "plan" ]; then
            STATUS=$([ "${{ steps.plan.outcome }}" == "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")
            cat > /tmp/raw_output.txt << 'EOF'
          ${{ steps.plan.outputs.tg_action_output }}
          EOF
          else
            STATUS=$([ "${{ steps.apply.outcome }}" == "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")
            cat > /tmp/raw_output.txt << 'EOF'
          ${{ steps.apply.outputs.tg_action_output }}
          EOF
          fi

          OUTPUT=$(python3 -c "
          import urllib.parse
          with open('/tmp/raw_output.txt', 'r') as f:
              encoded_content = f.read().strip()
          decoded_content = urllib.parse.unquote(encoded_content) if encoded_content else '${{ inputs.action-type }} execution completed. See workflow logs for detailed output.'
          print(decoded_content)
          ")

          if [ ${#OUTPUT} -gt 30000 ]; then
            OUTPUT="${OUTPUT:0:30000}... (output truncated, see workflow logs for full details)"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          {
            echo "output<<EOF"
            echo "$OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Get merged PR information
        id: merged-pr
        if: github.event_name == 'push'
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Find current PR
        id: pr-info
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: all

      - name: Create or update PR comment
        if: steps.pr-info.outputs.number
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## ${{ inputs.action-type == 'plan' && 'üìã Terragrunt Plan Results' || 'üöÄ Terragrunt Apply Completed' }}

            **Project**: ${{ inputs.project-name }}
            **Environment**: `${{ inputs.environment }}`
            **Directory**: `${{ inputs.working-directory }}`
            **Status**: ${{ steps.parse-results.outputs.status }}
            **Action**: ${{ inputs.action-type }}

            <details>
            <summary>üìù ${{ inputs.action-type == 'plan' && 'Plan' || 'Apply' }} Output</summary>

            ```hcl
            ${{ steps.parse-results.outputs.output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *Triggered by workflow automation system*
          comment-tag: 'terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}-${{ inputs.project-name }}'
          mode: upsert
          pr-number: ${{ steps.pr-info.outputs.number }}
        continue-on-error: true

      - name: Exit with appropriate code
        run: |
          if [ "${{ inputs.action-type }}" == "plan" ]; then
            if [ "${{ steps.plan.outcome }}" == "failure" ]; then
              echo "::error::Terragrunt plan failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
              exit 1
            fi
          else
            if [ "${{ steps.apply.outcome }}" == "failure" ]; then
              echo "::error::Terragrunt apply failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
              exit 1
            fi
          fi
