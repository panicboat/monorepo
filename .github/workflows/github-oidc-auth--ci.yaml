name: 'GitHub OIDC Auth - CI/CD (New Architecture)'

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - '**'
    paths:
      - 'github-oidc-auth/**'
      - '.github/workflows/github-oidc-auth--*.yaml'
      - '.github/workflows/reusable--*.yaml'
      - '.github/workflows/wait-for-workflows.yaml'
  push:
    branches:
      - develop
      - staging/github-oidc-auth
      - production/github-oidc-auth
    paths:
      - 'github-oidc-auth/**'

jobs:
  validate-new-architecture:
    name: 'Validate New Architecture Setup'
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scenario == 'validate_new_architecture'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq

      - name: Validate mapping configuration
        run: |
          MAPPING_FILE=".github/directory-label-mapping.yaml"

          echo "🔍 新アーキテクチャ設定の検証"
          echo "================================"

          if [ ! -f "$MAPPING_FILE" ]; then
            echo "❌ マッピングファイルが見つかりません: $MAPPING_FILE"
            exit 1
          fi

          echo "✅ マッピングファイルが存在します"

          # 設定の妥当性チェック
          echo ""
          echo "📋 github-oidc-auth サービスの設定:"
          echo "-----------------------------------"

          # github-oidc-auth の設定を確認
          GITHUB_OIDC_MAPPINGS=$(yq e '.mappings | to_entries | map(select(.key | startswith("github-oidc-auth"))) | from_entries' "$MAPPING_FILE")
          echo "$GITHUB_OIDC_MAPPINGS" | yq e '. | to_entries | .[] | "📁 " + .key + " → " + (.value.labels | join(", "))'

          echo ""
          echo "🌍 環境設定:"
          echo "------------"
          yq e '.environment_config | to_entries | .[] | "🔧 " + .key + ": " + .value.aws_region + " (" + .value.iam_role_plan + ")"' "$MAPPING_FILE"

          echo ""
          echo "✅ 設定検証完了"

      - name: Test label parsing logic
        run: |
          echo ""
          echo "🧪 ラベル解析ロジックのテスト"
          echo "==============================="

          # テスト用ラベル
          TEST_LABELS=(
            "deploy:github-oidc-auth:develop"
            "deploy:github-oidc-auth:staging"
            "deploy:github-oidc-auth:production"
          )

          for label in "${TEST_LABELS[@]}"; do
            echo "Testing label: $label"

            if [[ $label =~ ^deploy:([^:]+):([^:]+)(:([^:]+))?$ ]]; then
              SERVICE="${BASH_REMATCH[1]}"
              ENVIRONMENT="${BASH_REMATCH[2]}"
              STACK="${BASH_REMATCH[4]:-terragrunt}"

              echo "  ✅ Service: $SERVICE, Environment: $ENVIRONMENT, Stack: $STACK"
            else
              echo "  ❌ Invalid label format"
            fi
          done

          echo ""
          echo "✅ ラベル解析テスト完了"

  emergency-deploy:
    name: 'Emergency Deploy (Legacy Compatibility)'
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scenario == 'emergency_deploy'
    steps:
      - name: Emergency deploy notice
        run: |
          echo "🚨 緊急デプロイモード"
          echo "対象環境: ${{ github.event.inputs.target_environment }}"
          echo ""
          echo "新アーキテクチャが利用できない場合の緊急措置として、"
          echo "既存のreusableワークフローを直接呼び出します。"

      - name: Call legacy terragrunt orchestrator
        uses: ./.github/workflows/reusable--terragrunt-orchestrator.yaml
        secrets: inherit
        with:
          project-name: github-oidc-auth
          action-type: 'apply'

  architecture-comparison:
    name: 'Compare Old vs New Architecture'
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scenario == 'compare_with_legacy'
    steps:
      - name: Architecture comparison
        run: |
          echo "📊 アーキテクチャ比較"
          echo "===================="
          echo ""
          echo "🔵 従来のアーキテクチャ:"
          echo "  - ファイル: github-oidc-auth--ci.yaml"
          echo "  - トリガー: path-based (github-oidc-auth/**)"
          echo "  - 処理: reusable--terragrunt-orchestrator.yaml"
          echo "  - 設定: .github/terragrunt-actions-config.yaml"
          echo ""
          echo "🟢 新しいアーキテクチャ:"
          echo "  - ファイル1: detect-changes-and-label.yaml"
          echo "  - ファイル2: deploy-based-on-labels.yaml"
          echo "  - トリガー: label-based"
          echo "  - 設定: .github/directory-label-mapping.yaml"
          echo ""
          echo "📈 利点:"
          echo "  ✅ 差分検知とデプロイ実行の分離"
          echo "  ✅ 手動でのデプロイ制御が可能"
          echo "  ✅ 新サービス追加時の設定が簡単"
          echo "  ✅ PRラベルによる視覚的な確認"
          echo ""
          echo "🔄 移行手順:"
          echo "  1. 新アーキテクチャのテスト完了"
          echo "  2. 既存ワークフローの段階的無効化"
          echo "  3. 新アーキテクチャの本格運用開始"
          echo "  4. 古いファイルの削除"
