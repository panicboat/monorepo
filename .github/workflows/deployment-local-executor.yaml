name: 'Local Environment Deployment'

on:
  pull_request:
    types: [labeled, synchronize]
    branches: ['**']
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write
  packages: read

jobs:
  check-deploy-labels:
    name: 'Check Deployment Labels'
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      services: ${{ steps.extract.outputs.services }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get current PR information
        id: pr-info
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          state: all
        continue-on-error: true

      - name: Check for deployment labels
        id: check
        if: steps.pr-info.outputs.number != ''
        run: |
          echo "üîç Fetching labels from merged PR #${{ steps.pr-info.outputs.number }}..."
          LABELS=$(gh pr view ${{ steps.pr-info.outputs.number }} --json labels --jq '.labels[].name')
          HAS_DEPLOY_LABELS=$(echo "$LABELS" | grep -q "^deploy:" && echo "true" || echo "false")
          echo "should-deploy=$HAS_DEPLOY_LABELS" >> $GITHUB_OUTPUT
          echo "‚úÖ Found merged PR #${{ steps.pr-info.outputs.number }} with deploy labels: $HAS_DEPLOY_LABELS"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Extract services from deploy labels
        id: extract
        if: steps.pr-info.outputs.number != '' && steps.check.outputs.should-deploy == 'true'
        run: |
          LABELS=$(gh pr view ${{ steps.pr-info.outputs.number }} --json labels --jq '.labels[].name' | grep "^deploy:" | sed 's/deploy://' | jq -R -s -c 'split("\n")[:-1]')
          echo "services=$LABELS" >> $GITHUB_OUTPUT
          echo "‚úÖ Services to deploy: $LABELS"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

  deploy-to-local-cluster:
    name: 'Deploy to Local Cluster (${{ matrix.service }})'
    runs-on: ubuntu-latest
    needs: check-deploy-labels
    if: needs.check-deploy-labels.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service: ${{ fromJson(needs.check-deploy-labels.outputs.services) }}
      fail-fast: false

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Check if local overlay exists
        id: check-local
        run: |
          LOCAL_PATH="${{ matrix.service }}/kubernetes/overlays/local"
          if [ -d "$LOCAL_PATH" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Local overlay found: $LOCAL_PATH"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Local overlay not found: $LOCAL_PATH - skipping deployment"
          fi

      - name: Deploy to Local Environment
        if: steps.check-local.outputs.exists == 'true'
        uses: ./.github/workflows/reusable--kubernetes-executor.yaml
        with:
          service-name: ${{ matrix.service }}
          environment: local
          source-path: ${{ matrix.service }}/kubernetes/overlays/local
          target-repository: panicboat/generated-manifests
          target-branch: main
          action-type: apply
        secrets:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
