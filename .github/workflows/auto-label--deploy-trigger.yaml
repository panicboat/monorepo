name: 'Auto Label - Deploy Trigger'

on:
  pull_request:
    types: [labeled, unlabeled]
    branches:
      - '**'
  push:
    branches:
      - develop
      - 'staging/**'
      - 'production/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  packages: read

jobs:
  extract-deployment-targets:
    name: 'Extract deployment targets'
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.extract.outputs.targets }}
      has_targets: ${{ steps.extract.outputs.has_targets }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: .github/scripts/label-based-deploy-helpers

      - name: Deploy Trigger - Extract targets
        if: github.event_name == 'pull_request'
        id: extract-labels
        run: |
          bin/deploy-trigger from_labels ${{ github.event.pull_request.number }} --base-ref=${{ github.base_ref }} --head-ref=${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        working-directory: .github/scripts/label-based-deploy-helpers

      - name: Deploy Trigger - Extract targets from branch
        if: github.event_name == 'push'
        id: extract-branch
        run: |
          bin/deploy-trigger from_branch ${{ github.ref_name }} --base-ref=${{ github.base_ref }} --head-ref=${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        working-directory: .github/scripts/label-based-deploy-helpers

      - name: Set final outputs
        id: extract
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "targets=${{ env.DEPLOYMENT_TARGETS }}" >> $GITHUB_OUTPUT
            echo "has_targets=${{ env.HAS_TARGETS }}" >> $GITHUB_OUTPUT
          else
            echo "targets=${{ env.DEPLOYMENT_TARGETS }}" >> $GITHUB_OUTPUT
            echo "has_targets=${{ env.HAS_TARGETS }}" >> $GITHUB_OUTPUT
          fi

  deploy-terragrunt:
    name: 'Deploy Terragrunt (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_targets == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.targets) }}
      fail-fast: false
    uses: ./.github/workflows/reusable--terragrunt-executor.yaml  # 既存ワークフロー維持
    secrets: inherit
    with:
      project-name: ${{ matrix.target.service }}
      environment: ${{ matrix.target.environment }}
      action-type: ${{ github.event_name == 'pull_request' && 'plan' || 'apply' }}
      plan-iam-role: ${{ matrix.target.iam_role_plan }}
      apply-iam-role: ${{ matrix.target.iam_role_apply }}
      aws-region: ${{ matrix.target.aws_region }}
      working-directory: ${{ matrix.target.working_directory }}
      terraform-version: ${{ matrix.target.terraform_version }}
      terragrunt-version: ${{ matrix.target.terragrunt_version }}
