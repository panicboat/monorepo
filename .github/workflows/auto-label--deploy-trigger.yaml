name: 'Auto Label - Deploy Trigger'

on:
  pull_request:
    types: [labeled, unlabeled]
    branches:
      - '**'
  push:
    branches:
      - develop
      - main
      - 'staging/**'
      - 'production/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  packages: read

jobs:
  extract-deployment-targets:
    name: 'Extract deployment targets'
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.extract.outputs.targets }}
      has_targets: ${{ steps.extract.outputs.has_targets }}
      target_environment: ${{ steps.extract.outputs.target_environment }}
      safety_status: ${{ steps.extract.outputs.safety_status }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: .github/scripts/shared

      - name: Get merged PR information
        if: github.event_name == 'push'
        id: get-merged-pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Determine target environment
        if: github.event_name == 'push'
        id: determine-env
        run: |
          case "${{ github.ref_name }}" in
            "develop"|"main")
              echo "environment=develop" >> $GITHUB_OUTPUT
              ;;
            staging/*)
              echo "environment=staging" >> $GITHUB_OUTPUT
              ;;
            production/*)
              echo "environment=production" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "environment=unknown" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Deploy Trigger - Extract targets from PR labels
        if: github.event_name == 'pull_request'
        id: extract-labels
        working-directory: .github/scripts/shared
        run: |
          bundle exec ruby ../deploy-trigger/bin/trigger from_pr ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Deploy Trigger - Extract targets from branch push
        if: github.event_name == 'push'
        id: extract-branch
        working-directory: .github/scripts/shared
        run: |
          # Get merged PR information first
          if [ -n "${{ steps.get-merged-pr.outputs.number }}" ]; then
            echo "Found merged PR #${{ steps.get-merged-pr.outputs.number }}"
            bundle exec ruby ../deploy-trigger/bin/trigger from_pr ${{ steps.get-merged-pr.outputs.number }} --target-environment="${TARGET_ENV}"
          else
            echo "::error::No merged PR found - deployment stopped"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          TARGET_ENV: ${{ steps.determine-env.outputs.environment }}

      - name: Set final outputs
        id: extract
        run: |
          # GitHub Actions environment variables are automatically set by our presenters
          echo "targets=${DEPLOYMENT_TARGETS:-[]}" >> $GITHUB_OUTPUT
          echo "has_targets=${HAS_TARGETS:-false}" >> $GITHUB_OUTPUT
          echo "target_environment=${TARGET_ENVIRONMENT:-unknown}" >> $GITHUB_OUTPUT
          echo "safety_status=${SAFETY_STATUS:-unknown}" >> $GITHUB_OUTPUT

      - name: Safety check validation
        if: env.ERROR_OCCURRED == 'true'
        run: |
          echo "::error::Deployment safety validation failed: ${ERROR_MESSAGE}"
          echo "This prevents unauthorized or accidental deployments."
          echo "Ensure this deployment follows the proper PR workflow as defined in Issue #107."
          exit 1

  deploy-terragrunt:
    name: 'Deploy Terragrunt (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_targets == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.targets) }}
      fail-fast: false
    uses: ./.github/workflows/reusable--terragrunt-executor.yaml
    secrets: inherit
    with:
      project-name: ${{ matrix.target.service }}
      environment: ${{ matrix.target.environment }}
      action-type: ${{ github.event_name == 'pull_request' && 'plan' || 'apply' }}
      plan-iam-role: ${{ matrix.target.iam_role_plan }}
      apply-iam-role: ${{ matrix.target.iam_role_apply }}
      aws-region: ${{ matrix.target.aws_region }}
      working-directory: ${{ matrix.target.working_directory }}
      terraform-version: ${{ matrix.target.terraform_version }}
      terragrunt-version: ${{ matrix.target.terragrunt_version }}

  deployment-summary:
    name: 'Deployment Summary'
    needs: [extract-deployment-targets, deploy-terragrunt]
    if: always() && needs.extract-deployment-targets.outputs.has_targets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: ${{ needs.extract-deployment-targets.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Status**: ${{ needs.extract-deployment-targets.outputs.safety_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Results**: " >> $GITHUB_STEP_SUMMARY

          TARGETS='${{ needs.extract-deployment-targets.outputs.targets }}'
          echo "$TARGETS" | jq -r '.[] | "- \(.service):\(.environment) â†’ `\(.working_directory)`"' >> $GITHUB_STEP_SUMMARY
