name: 'Auto Label - Deploy Trigger'

on:
  pull_request:
    types: [labeled, synchronize]
    branches:
      - '**'
  push:
    branches:
      - develop
      - main
      - 'staging/**'
      - 'production/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write
  packages: read

jobs:
  extract-deployment-targets:
    name: 'Extract deployment targets'
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.extract.outputs.targets }}
      has_targets: ${{ steps.extract.outputs.has_targets }}
      target_environment: ${{ steps.extract.outputs.target_environment }}
      safety_status: ${{ steps.extract.outputs.safety_status }}
      # Dynamic stack information
      detected_stacks: ${{ steps.filter.outputs.detected_stacks }}
      # Currently supported stacks
      terragrunt_targets: ${{ steps.filter.outputs.terragrunt_targets }}
      kubernetes_targets: ${{ steps.filter.outputs.kubernetes_targets }}
      has_terragrunt: ${{ steps.filter.outputs.has_terragrunt }}
      has_kubernetes: ${{ steps.filter.outputs.has_kubernetes }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: .github/scripts

      - name: Get merged PR information
        if: github.event_name == 'push'
        id: get-merged-pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Deploy Trigger - Extract targets from PR labels
        if: github.event_name == 'pull_request'
        id: extract-labels
        working-directory: .github/scripts
        run: |
          bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Deploy Trigger - Extract targets from branch push
        if: github.event_name == 'push'
        id: extract-branch
        working-directory: .github/scripts
        run: |
          # Get merged PR information first
          if [ -n "${{ steps.get-merged-pr.outputs.number }}" ]; then
            echo "Found merged PR #${{ steps.get-merged-pr.outputs.number }}"
            # Ruby will determine target environment from current branch
            bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ steps.get-merged-pr.outputs.number }}
          else
            echo "::error::No merged PR found - deployment stopped"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Set final outputs
        id: extract
        run: |
          # GitHub Actions environment variables are automatically set by our presenters
          echo "targets=${DEPLOYMENT_TARGETS:-[]}" >> $GITHUB_OUTPUT
          echo "has_targets=${HAS_TARGETS:-false}" >> $GITHUB_OUTPUT
          echo "target_environment=${TARGET_ENVIRONMENT:-unknown}" >> $GITHUB_OUTPUT
          echo "safety_status=${SAFETY_STATUS:-unknown}" >> $GITHUB_OUTPUT

      - name: Safety check validation
        if: env.ERROR_OCCURRED == 'true'
        run: |
          echo "::error::Deployment safety validation failed: ${ERROR_MESSAGE}"
          echo "This prevents unauthorized or accidental deployments."
          exit 1

      - name: Filter targets by stack
        id: filter
        run: |
          TARGETS="${DEPLOYMENT_TARGETS:-[]}"

          # Automatically detect all existing stacks
          STACKS=$(echo "$TARGETS" | jq -r '.[].stack' | sort -u)

          # Dynamically filter targets for each stack
          for stack in $STACKS; do
            STACK_TARGETS=$(echo "$TARGETS" | jq -c --arg stack "$stack" '[.[] | select(.stack == $stack)]')
            COUNT=$(echo "$STACK_TARGETS" | jq 'length')
            HAS_TARGETS=$([ $COUNT -gt 0 ] && echo 'true' || echo 'false')

            # Dynamically set outputs
            echo "${stack}_targets=$STACK_TARGETS" >> $GITHUB_OUTPUT
            echo "has_${stack}=$HAS_TARGETS" >> $GITHUB_OUTPUT
          done

          # Output list of all detected stacks
          echo "detected_stacks=$(echo $STACKS | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

  deploy-terragrunt:
    name: 'Deploy Terragrunt (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_terragrunt == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.terragrunt_targets) }}
      fail-fast: false
    uses: ./.github/workflows/reusable--terragrunt-executor.yaml
    with:
      project-name: ${{ matrix.target.service }}
      environment: ${{ matrix.target.environment }}
      action-type: ${{ github.event_name == 'pull_request' && 'plan' || 'apply' }}
      plan-iam-role: ${{ matrix.target.iam_role_plan }}
      apply-iam-role: ${{ matrix.target.iam_role_apply }}
      aws-region: ${{ matrix.target.aws_region }}
      working-directory: ${{ matrix.target.working_directory }}
    secrets:
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  deploy-kubernetes:
    name: 'Deploy Kubernetes (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_kubernetes == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.kubernetes_targets) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute Kubernetes deployment
        run: |
          echo "üöß Kubernetes deployment for ${{ matrix.target.service }}:${{ matrix.target.environment }}"
          echo "Working directory: ${{ matrix.target.working_directory }}"
          echo "Stack: ${{ matrix.target.stack }}"
          echo ""
          echo "This will be implemented with kubernetes executor workflow"
          echo "Future implementation:"
          echo "  - Setup kubectl and kustomize"
          echo "  - Run kustomize build"
          echo "  - Apply manifests to cluster"
          echo "  - Verify deployment health"

  deployment-summary:
    name: 'Deployment Summary'
    needs: [extract-deployment-targets, deploy-terragrunt, deploy-kubernetes]
    if: always() && needs.extract-deployment-targets.outputs.has_targets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: ${{ needs.extract-deployment-targets.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Status**: ${{ needs.extract-deployment-targets.outputs.safety_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event Type**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "push" ]; then
            echo "**Merged PR**: #${{ needs.extract-deployment-targets.outputs.merged_pr_number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Pull Request**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Show all deployment targets with status (Dynamic)
          echo "### üìã Deployment Targets" >> $GITHUB_STEP_SUMMARY
          TARGETS='${{ needs.extract-deployment-targets.outputs.targets }}'
          DETECTED_STACKS='${{ needs.extract-deployment-targets.outputs.detected_stacks }}'

          # Count targets by stack dynamically
          TOTAL_COUNT=$(echo "$TARGETS" | jq 'length')
          echo "**Total Targets**: $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY

          # Dynamic stack counting
          IFS=',' read -ra STACK_ARRAY <<< "$DETECTED_STACKS"
          for stack in "${STACK_ARRAY[@]}"; do
            COUNT=$(echo "$TARGETS" | jq --arg stack "$stack" '[.[] | select(.stack == $stack)] | length')
            # Select icon based on stack name
            case "$stack" in
              "terragrunt") ICON="üèóÔ∏è" ;;
              "kubernetes") ICON="‚ò∏Ô∏è" ;;
              *) ICON="üì¶" ;;
            esac
            echo "- $ICON $stack: $COUNT targets" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all targets
          echo "### üìä Target Details" >> $GITHUB_STEP_SUMMARY
          echo "$TARGETS" | jq -r '.[] | "- **\(.service):\(.environment)** (\(.stack)) ‚Üí `\(.working_directory)`"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show deployment results by stack (Dynamic)
          echo "### üìà Deployment Results" >> $GITHUB_STEP_SUMMARY

          TERRAGRUNT_RESULT="${{ needs.deploy-terragrunt.result }}"
          KUBERNETES_RESULT="${{ needs.deploy-kubernetes.result }}"

          # Helper function for result icons
          get_result_icon() {
            case "$1" in
              "success") echo "‚úÖ" ;;
              "failure") echo "‚ùå" ;;
              "cancelled") echo "‚èπÔ∏è" ;;
              "skipped") echo "‚è≠Ô∏è" ;;
              *) echo "‚ùì" ;;
            esac
          }

          # Show results for detected stacks
          DETECTED_STACKS='${{ needs.extract-deployment-targets.outputs.detected_stacks }}'
          IFS=',' read -ra STACK_ARRAY <<< "$DETECTED_STACKS"

          for stack in "${STACK_ARRAY[@]}"; do
            case "$stack" in
              "terragrunt")
                ICON=$(get_result_icon "$TERRAGRUNT_RESULT")
                echo "- $ICON **Terragrunt**: $TERRAGRUNT_RESULT" >> $GITHUB_STEP_SUMMARY
                ;;
              "kubernetes")
                ICON=$(get_result_icon "$KUBERNETES_RESULT")
                echo "- $ICON **Kubernetes**: $KUBERNETES_RESULT" >> $GITHUB_STEP_SUMMARY
                ;;
              *)
                # Placeholder for future stacks
                echo "- üì¶ **$stack**: not implemented yet" >> $GITHUB_STEP_SUMMARY
                ;;
            esac
          done
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add workflow link
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "üìã [View detailed logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Automated deployment*" >> $GITHUB_STEP_SUMMARY
