name: 'Auto Label - Deploy Trigger'

on:
  pull_request:
    types: [labeled, unlabeled]
    branches:
      - '**'
  push:
    branches:
      - develop
      - main
      - 'staging/**'
      - 'production/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  packages: read

jobs:
  extract-deployment-targets:
    name: 'Extract deployment targets'
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.extract.outputs.targets }}
      has_targets: ${{ steps.extract.outputs.has_targets }}
      target_environment: ${{ steps.extract.outputs.target_environment }}
      safety_status: ${{ steps.extract.outputs.safety_status }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: .github/scripts

      - name: Get merged PR information
        if: github.event_name == 'push'
        id: get-merged-pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Deploy Trigger - Extract targets from PR labels
        if: github.event_name == 'pull_request'
        id: extract-labels
        working-directory: .github/scripts
        run: |
          bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Deploy Trigger - Extract targets from branch push
        if: github.event_name == 'push'
        id: extract-branch
        working-directory: .github/scripts
        run: |
          # Get merged PR information first
          if [ -n "${{ steps.get-merged-pr.outputs.number }}" ]; then
            echo "Found merged PR #${{ steps.get-merged-pr.outputs.number }}"
            # Ruby will determine target environment from current branch
            bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ steps.get-merged-pr.outputs.number }}
          else
            echo "::error::No merged PR found - deployment stopped"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Set final outputs
        id: extract
        run: |
          # GitHub Actions environment variables are automatically set by our presenters
          echo "targets=${DEPLOYMENT_TARGETS:-[]}" >> $GITHUB_OUTPUT
          echo "has_targets=${HAS_TARGETS:-false}" >> $GITHUB_OUTPUT
          echo "target_environment=${TARGET_ENVIRONMENT:-unknown}" >> $GITHUB_OUTPUT
          echo "safety_status=${SAFETY_STATUS:-unknown}" >> $GITHUB_OUTPUT

      - name: Safety check validation
        if: env.ERROR_OCCURRED == 'true'
        run: |
          echo "::error::Deployment safety validation failed: ${ERROR_MESSAGE}"
          echo "This prevents unauthorized or accidental deployments."
          echo "Ensure this deployment follows the proper PR workflow as defined in Issue #107."
          exit 1

  deploy-terragrunt:
    name: 'Deploy Terragrunt (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_targets == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.targets) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Check target stack
        id: check
        run: |
          if [ "${{ matrix.target.stack }}" == "terragrunt" ]; then
            echo "execute=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Processing terragrunt target: ${{ matrix.target.service }}:${{ matrix.target.environment }}"
          else
            echo "execute=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping ${{ matrix.target.service }}:${{ matrix.target.environment }} (stack: ${{ matrix.target.stack }})"
          fi

      - name: Checkout code
        if: steps.check.outputs.execute == 'true'
        uses: actions/checkout@v4

      - name: Execute Terragrunt deployment
        if: steps.check.outputs.execute == 'true'
        uses: ./.github/workflows/reusable--terragrunt-executor.yaml
        with:
          project-name: ${{ matrix.target.service }}
          environment: ${{ matrix.target.environment }}
          action-type: ${{ github.event_name == 'pull_request' && 'plan' || 'apply' }}
          plan-iam-role: ${{ matrix.target.iam_role_plan }}
          apply-iam-role: ${{ matrix.target.iam_role_apply }}
          aws-region: ${{ matrix.target.aws_region }}
          working-directory: ${{ matrix.target.working_directory }}
          terraform-version: ${{ matrix.target.terraform_version }}
          terragrunt-version: ${{ matrix.target.terragrunt_version }}

  deploy-kubernetes:
    name: 'Deploy Kubernetes (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: extract-deployment-targets
    if: needs.extract-deployment-targets.outputs.has_targets == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.targets) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Check target stack
        id: check
        run: |
          if [ "${{ matrix.target.stack }}" == "kubernetes" ]; then
            echo "execute=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Processing kubernetes target: ${{ matrix.target.service }}:${{ matrix.target.environment }}"
          else
            echo "execute=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping ${{ matrix.target.service }}:${{ matrix.target.environment }} (stack: ${{ matrix.target.stack }})"
          fi

      - name: Checkout code
        if: steps.check.outputs.execute == 'true'
        uses: actions/checkout@v4

      - name: Execute Kubernetes deployment
        if: steps.check.outputs.execute == 'true'
        run: |
          echo "üöß Kubernetes deployment for ${{ matrix.target.service }}:${{ matrix.target.environment }}"
          echo "Working directory: ${{ matrix.target.working_directory }}"
          echo "Stack: ${{ matrix.target.stack }}"
          echo "kubectl version: ${{ matrix.target.kubectl_version || '1.28.0' }}"
          echo "kustomize version: ${{ matrix.target.kustomize_version || '5.0.0' }}"
          echo ""
          echo "This will be implemented with kubernetes executor workflow"
          echo "Future implementation:"
          echo "  - Setup kubectl and kustomize"
          echo "  - Run kustomize build"
          echo "  - Apply manifests to cluster"
          echo "  - Verify deployment health"

  deployment-summary:
    name: 'Deployment Summary'
    needs: [extract-deployment-targets, deploy-terragrunt, deploy-kubernetes]
    if: always() && needs.extract-deployment-targets.outputs.has_targets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: ${{ needs.extract-deployment-targets.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Status**: ${{ needs.extract-deployment-targets.outputs.safety_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event Type**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "push" ]; then
            echo "**Merged PR**: #${{ needs.extract-deployment-targets.outputs.merged_pr_number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Pull Request**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Show all deployment targets with status
          echo "### üìã Deployment Targets" >> $GITHUB_STEP_SUMMARY
          TARGETS='${{ needs.extract-deployment-targets.outputs.targets }}'

          # Count targets by stack
          TERRAGRUNT_COUNT=$(echo "$TARGETS" | jq '[.[] | select(.stack == "terragrunt")] | length')
          KUBERNETES_COUNT=$(echo "$TARGETS" | jq '[.[] | select(.stack == "kubernetes")] | length')
          TOTAL_COUNT=$(echo "$TARGETS" | jq 'length')

          echo "**Total Targets**: $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Terragrunt: $TERRAGRUNT_COUNT targets" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ò∏Ô∏è Kubernetes: $KUBERNETES_COUNT targets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all targets
          echo "### üìä Target Details" >> $GITHUB_STEP_SUMMARY
          echo "$TARGETS" | jq -r '.[] | "- **\(.service):\(.environment)** (\(.stack)) ‚Üí `\(.working_directory)`"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show deployment results by stack
          echo "### üìà Deployment Results" >> $GITHUB_STEP_SUMMARY

          TERRAGRUNT_RESULT="${{ needs.deploy-terragrunt.result }}"
          KUBERNETES_RESULT="${{ needs.deploy-kubernetes.result }}"

          case "$TERRAGRUNT_RESULT" in
            "success") TERRAGRUNT_ICON="‚úÖ" ;;
            "failure") TERRAGRUNT_ICON="‚ùå" ;;
            "cancelled") TERRAGRUNT_ICON="‚èπÔ∏è" ;;
            "skipped") TERRAGRUNT_ICON="‚è≠Ô∏è" ;;
            *) TERRAGRUNT_ICON="‚ùì" ;;
          esac

          case "$KUBERNETES_RESULT" in
            "success") KUBERNETES_ICON="‚úÖ" ;;
            "failure") KUBERNETES_ICON="‚ùå" ;;
            "cancelled") KUBERNETES_ICON="‚èπÔ∏è" ;;
            "skipped") KUBERNETES_ICON="‚è≠Ô∏è" ;;
            *) KUBERNETES_ICON="‚ùì" ;;
          esac

          echo "- $TERRAGRUNT_ICON **Terragrunt**: $TERRAGRUNT_RESULT" >> $GITHUB_STEP_SUMMARY
          echo "- $KUBERNETES_ICON **Kubernetes**: $KUBERNETES_RESULT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add workflow link
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "üìã [View detailed logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Automated deployment via [Issue #107 strategy](https://github.com/panicboat/monorepo/issues/107)*" >> $GITHUB_STEP_SUMMARY
