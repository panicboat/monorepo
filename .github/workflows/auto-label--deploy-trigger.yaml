name: 'Auto Label - Deploy Trigger'

on:
  pull_request:
    types: [labeled]
    branches:
      - '**'
  push:
    branches:
      - develop
      - staging
      - production

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  prepare-deployment:
    name: 'Prepare Deployment'
    runs-on: ubuntu-latest
    outputs:
      github-token: ${{ steps.app-token.outputs.token }}
      pr-number: ${{ steps.pr-info.outputs.number }}
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Get PR information
        id: pr-info
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          state: all
        continue-on-error: true

  extract-deployment-targets:
    name: 'Extract Deployment Targets'
    needs: prepare-deployment
    uses: takanokenichi/deploy-actions/.github/workflows/reusable--deploy-trigger.yaml@main
    with:
      event-type: ${{ github.event_name }}
      branch-name: ${{ github.ref_name }}
      pr-number: ${{ needs.prepare-deployment.outputs.pr-number || github.event.pull_request.number }}
      repository: ${{ github.repository }}
      config-path: '.github/config/workflow-config.yaml'
    secrets:
      github-token: ${{ needs.prepare-deployment.outputs.github-token }}

  deploy-terragrunt:
    name: 'Deploy Terragrunt (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: [prepare-deployment, extract-deployment-targets]
    if: needs.extract-deployment-targets.outputs.has-terragrunt == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.terragrunt-targets) }}
      fail-fast: false
    uses: takanokenichi/deploy-actions/.github/workflows/reusable--terragrunt-executor.yaml@main
    with:
      project-name: ${{ matrix.target.service }}
      environment: ${{ matrix.target.environment }}
      action-type: ${{ github.event_name == 'pull_request' && 'plan' || 'apply' }}
      plan-iam-role: ${{ matrix.target.iam_role_plan }}
      apply-iam-role: ${{ matrix.target.iam_role_apply }}
      aws-region: ${{ matrix.target.aws_region }}
      working-directory: ${{ matrix.target.working_directory }}
      repository: ${{ github.repository }}
    secrets:
      github-token: ${{ needs.prepare-deployment.outputs.github-token }}

  deploy-kubernetes:
    name: 'Deploy Kubernetes (${{ matrix.target.service }}:${{ matrix.target.environment }})'
    needs: [prepare-deployment, extract-deployment-targets]
    if: needs.extract-deployment-targets.outputs.has-kubernetes == 'true'
    strategy:
      matrix:
        target: ${{ fromJson(needs.extract-deployment-targets.outputs.kubernetes-targets) }}
      fail-fast: false
    uses: takanokenichi/deploy-actions/.github/workflows/reusable--kubernetes-executor.yaml@main
    with:
      service-name: ${{ matrix.target.service }}
      environment: ${{ matrix.target.environment }}
      source-path: ${{ matrix.target.working_directory }}
      action-type: ${{ github.event_name == 'pull_request' && 'diff' || 'apply' }}
      repository: ${{ github.repository }}
    secrets:
      github-token: ${{ needs.prepare-deployment.outputs.github-token }}

  deployment-summary:
    name: 'Deployment Summary'
    needs: [prepare-deployment, extract-deployment-targets, deploy-terragrunt, deploy-kubernetes]
    if: always() && needs.extract-deployment-targets.outputs.has-targets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "ðŸ“Š Deployment Summary"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "PR: ${{ needs.prepare-deployment.outputs.pr-number }}"
          echo "Environment: ${{ needs.extract-deployment-targets.outputs.target-environment }}"
          echo "Safety Status: ${{ needs.extract-deployment-targets.outputs.safety-status }}"
          echo "Has Terragrunt: ${{ needs.extract-deployment-targets.outputs.has-terragrunt }}"
          echo "Has Kubernetes: ${{ needs.extract-deployment-targets.outputs.has-kubernetes }}"
          echo "Terragrunt Job Status: ${{ needs.deploy-terragrunt.result }}"
          echo "Kubernetes Job Status: ${{ needs.deploy-kubernetes.result }}"