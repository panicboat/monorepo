name: 'Reusable Terragrunt Single Environment'

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      terraform_version:
        required: false
        type: string
        default: '1.5.7'
        description: 'Terraform version'
      terragrunt_version:
        required: false
        type: string
        default: '0.53.2'
        description: 'Terragrunt version'
      action_type:
        required: true
        type: string
        description: 'Action type: plan or apply'
      plan_iam_role:
        required: true
        type: string
        description: 'IAM role for plan operations'
      apply_iam_role:
        required: true
        type: string
        description: 'IAM role for apply operations'
      aws_region:
        required: true
        type: string
        description: 'AWS region'
      working_directory:
        required: true
        type: string
        description: 'Working directory for terragrunt execution'

jobs:
  terragrunt-execution:
    name: '${{ inputs.action_type }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action_type == 'plan' && inputs.plan_iam_role || inputs.apply_iam_role }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Setup Terragrunt Binary
        run: |
          TG_VERSION=${{ inputs.terragrunt_version }}
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Terragrunt Plan
        if: inputs.action_type == 'plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'plan'
          args: '-no-color -detailed-exitcode'
          tg_dir: ${{ inputs.working_directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}

      - name: Terragrunt Apply
        if: inputs.action_type == 'apply'
        id: apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.terraform_version }}
          tg_version: ${{ inputs.terragrunt_version }}
          tg_command: 'apply'
          args: '-auto-approve -no-color'
          tg_dir: ${{ inputs.working_directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}

      - name: Parse Results
        if: always()
        id: parse-results
        run: |
          if [ "${{ inputs.action_type }}" == "plan" ]; then
            STATUS=$([ "${{ steps.plan.outcome }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
            cat > /tmp/raw_output.txt << 'EOF'
          ${{ steps.plan.outputs.tg_action_output }}
          EOF
          else
            STATUS=$([ "${{ steps.apply.outcome }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
            cat > /tmp/raw_output.txt << 'EOF'
          ${{ steps.apply.outputs.tg_action_output }}
          EOF
          fi

          OUTPUT=$(python3 -c "
          import urllib.parse
          with open('/tmp/raw_output.txt', 'r') as f:
              encoded_content = f.read().strip()
          decoded_content = urllib.parse.unquote(encoded_content) if encoded_content else '${{ inputs.action_type }} execution completed. See workflow logs for detailed output.'
          print(decoded_content)
          ")

          if [ ${#OUTPUT} -gt 30000 ]; then
            OUTPUT="${OUTPUT:0:30000}... (output truncated, see workflow logs for full details)"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          {
            echo "output<<EOF"
            echo "$OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Get merged PR information
        id: merged-pr
        if: github.event_name == 'push'
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Determine PR context
        id: pr-context
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
          elif [ "${{ github.event_name }}" == "push" ] && [ "${{ steps.merged-pr.outputs.number }}" != "" ]; then
            PR_NUMBER="${{ steps.merged-pr.outputs.number }}"
            PR_TITLE="${{ steps.merged-pr.outputs.title }}"
          else
            PR_INFO=$(gh pr list --search "${{ github.sha }}" --state all --json number,title --jq '.[0]' 2>/dev/null || echo "null")
            if [ "$PR_INFO" != "null" ] && [ -n "$PR_INFO" ]; then
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number // empty')
              PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // empty')
            else
              PR_NUMBER=""
              PR_TITLE=""
            fi
          fi

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "has-pr=$([ -n "$PR_NUMBER" ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Create or update PR comment
        if: steps.pr-context.outputs.has-pr == 'true'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## ${{ inputs.action_type == 'plan' && '📋 Terragrunt Plan Results' || '🚀 Terragrunt Apply Completed' }}

            **Project**: ${{ inputs.project_name }}
            **Environment**: `${{ inputs.environment }}`
            **Directory**: `${{ inputs.working_directory }}`
            **Status**: ${{ steps.parse-results.outputs.status }}

            <details>
            <summary>📝 ${{ inputs.action_type == 'plan' && 'Plan' || 'Apply' }} Output</summary>

            ```hcl
            ${{ steps.parse-results.outputs.output }}
            ```

            </details>

            [View full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          comment-tag: 'terragrunt-${{ inputs.action_type }}-${{ inputs.environment }}-${{ inputs.project_name }}'
          mode: upsert
          pr-number: ${{ steps.pr-context.outputs.pr-number }}
        continue-on-error: true

      - name: Exit with appropriate code
        run: |
          if [ "${{ inputs.action_type }}" == "plan" ]; then
            if [ "${{ steps.plan.outcome }}" == "failure" ]; then
              exit 1
            fi
          else
            if [ "${{ steps.apply.outcome }}" == "failure" ]; then
              exit 1
            fi
          fi
